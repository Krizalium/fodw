#include "_macros.fos"
#include "logger_h.fos"

// By Krizalis
// / Server
#ifndef __CLIENT
import bool AddLog(uint type, string[] params) from "logger";

#define STR_SKILL_INCREASED     ( 3446 )    //

void IncreaseCombatSkill (Critter& attacker, Critter& target, uint8 skillNum, int damage, bool isSneak)
{
	/* TODO 
	bool targetIsPlayer = false; // Меньше рост за плеера.
	
	if (target.IsPlayer())
	{
		targetIsPlayer = true;
	}*/
	if (!valid (target))
	{
		Log ("not valid");
	}
	if (damage > 0)
	{
		GameVar @ increaseSkill = GetLocalVar(skillNum, attacker.Id);
		increaseSkill+= damage;
		//Log ("Осталось: "+(CalcNeedPointsToIncreseSkill(attacker, skillNum) - increaseSkill.GetValue()));
		if (uint(increaseSkill.GetValue()) > CalcNeedPointsToIncreseSkill ( attacker, skillNum))
		{
			increaseSkill = 0;
			attacker.SkillBase[skillNum]+=1;
			attacker.SayMsg (SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_INCREASED);
			
			string[]params = {""+attacker.Id, attacker.Name, ""+skillNum, ""+damage, ""+attacker.Skill[skillNum]};
			AddLog(LOG_TYPE_CRITTER_SKILL_INCREADED, params);
		}
	}
	if (isSneak)
	{
		IncreaseCombatSkill (attacker, target, SK_SNEAK, damage, false);
	}
}

void IncreasePeaceSkill (Critter& cr, uint8 skillNum, bool success, uint points)
{
	if (points > 0)
	{
		GameVar @ increaseSkill = GetLocalVar(skillNum, cr.Id);
		
		success ? increaseSkill+= points : increaseSkill+= points/5;
		
		//Log ("CalcNeedPointsToIncreseSkill ( cr, skillNum)"+CalcNeedPointsToIncreseSkill ( cr, skillNum));
		if (uint(increaseSkill.GetValue()) > CalcNeedPointsToIncreseSkill ( cr, skillNum))
		{
			increaseSkill = 0;
			cr.SkillBase[skillNum]+=1;
			cr.SayMsg (SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_INCREASED);
			
			string[]params = {""+cr.Id, cr.Name, ""+skillNum, ""+points, ""+cr.Skill[skillNum]};
			AddLog(LOG_TYPE_CRITTER_SKILL_INCREADED, params);
		}
	}
}

uint CalcNeedPointsToIncreseSkill(Critter& cr, uint8 skillNum)
{
	uint8 intellect = cr.Stat[ST_INTELLECT];
	uint8 modBase = 1;
	uint8 modSkill = 1;
	uint8 currentSkill = uint(cr.Skill[skillNum]);
	
	switch (skillNum)
	{
		case SK_SMALL_GUNS:		
		case SK_BIG_GUNS:		
		case SK_ENERGY_WEAPONS:	
		case SK_UNARMED:		
		case SK_MELEE_WEAPONS:	modSkill = 1; break;
		case SK_THROWING: break;
			default: break; 
	}
	return currentSkill * modBase * modSkill + currentSkill*(11 - intellect);
}

void r_TeachInit(Critter& cr, Critter@ npc)
{
	if (npc.Stat[ST_TEACHER_SKILLID] >= SK_SMALL_GUNS && npc.Stat[ST_TEACHER_SKILLID] <= SK_BARTER)
	{
		if (npc.Stat[ST_TEACHER_MAXSKILL] > 0 && !npc.IsDead())
		{
			cr.RunClientScript("increase_skill@ShowTeachScreen", npc.Stat[ST_TEACHER_SKILLID], npc.Stat[ST_TEACHER_MAXSKILL], npc.Id, null, null);
			//ShowScreen (CLIENT_SCREEN_UPSKILL, ( dictionary = { { "currSkill", SK_MELEE_WEAPONS }, { "maxTeacherSkill", 50 }, {"learnerSkill", cr.Skill[SK_MELEE_WEAPONS]} } ));
		}
	}
}

#endif // !__CLIENT

// / Client
#ifdef __CLIENT
# include "_client_defines.fos"
void ShowTeachScreen( int skillNum, int teacherMaxSkill, int npcId, string@, int[] @ )
{
    CritterCl@ chosen = GetChosen();
    if( not valid( chosen ) )
        return;
	uint playerSkillVal = chosen.Skill[skillNum];
	//Message ("skillNum = "+skillNum+", teacherMaxSkill = "+teacherMaxSkill+", playerSkillVal = "+playerSkillVal);
	ShowScreen (CLIENT_SCREEN_UPSKILL, ( dictionary = { { "currSkill", skillNum }, { "maxTeacherSkill", teacherMaxSkill }, {"learnerSkill", playerSkillVal}, {"npcId", npcId } }));
	
}

#endif // __CLIENT