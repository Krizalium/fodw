// GUI scheme name: default

#include "_macros.fos"
#include "_client_defines.fos"
#include "_colors.fos"
#include "_msgstr.fos"
#include "input_h.fos"
#include "gui_h.fos"
#include "gui_screens_stuff.fos"
#include "generation_h.fos"

void InitializeScreens()
{
    Login::Init( CLIENT_MAIN_SCREEN_LOGIN );
    Registration::Init( CLIENT_MAIN_SCREEN_REGISTRATION );
    Options::Init( CLIENT_MAIN_SCREEN_OPTIONS );
    Game::Init( CLIENT_MAIN_SCREEN_GAME );
    Inventory::Init( CLIENT_SCREEN_INVENTORY );
    Cursor::Init( CLIENT_SCREEN_CURSOR );
	
	// Added
    SkillBox::Init( CLIENT_SCREEN_SKILLBOX );
	Character::Init( CLIENT_SCREEN_CHARACTER );
	
	UpSkill::Init (CLIENT_SCREEN_UPSKILL);
}

namespace Login
{
    class Login : GUIScreen
    {
        void OnConstruct() override
        {
            SetPosition( 50, 50 );
            SetSize( 800, 600 );
            SetDock( DOCK_FILL );
        }

        void OnGlobalInput( uint8 key, string@ text ) override
        {
            if( key == DIK_RETURN || key == DIK_NUMPADENTER )
                CustomCall( "Login\n" + Screen.FindText("InputLogin").Text + "\n" + Screen.FindText("InputPassword").Text, "\n" );
        }
    }

    class Menu : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 80, 60 );
            SetSize( 640, 480 );
            SetBackgroundImage( "art/intrface/login.png" );
        }
    }

    class Play : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 87, 207 );
            SetSize( 19, 19 );
            SetPressedImage( "art/intrface/login_button_down.png" );
        }

        void OnLMouseClick() override
        {
            if( !__Singleplayer )
                CustomCall( "Login\n" + Screen.FindText("InputLogin").Text + "\n" + Screen.FindText("InputPassword").Text, "\n" );
            else
                ShowScreen( CLIENT_MAIN_SCREEN_REGISTRATION );
        }
    }

    class Text1 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 22, 1 );
            SetTextFont( FONT_FAT );
        }

        string@ get_Text() override
        {
            return MSG_GAME( STR_LOGIN_PLAY );
        }
    }

    class Registration : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 87, 237 );
            SetSize( 19, 19 );
            SetPressedImage( "art/intrface/login_button_down.png" );
        }

        void OnLMouseClick() override
        {
            if( !__Singleplayer )
                ShowScreen( CLIENT_MAIN_SCREEN_REGISTRATION );
            else
                ShowScreen( CLIENT_SCREEN_SAVE_LOAD );
        }
    }

    class Text2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 22, 1 );
            SetText( MSG_GAME( STR_LOGIN_REGISTRATION ) );
            SetTextFont( FONT_FAT );
        }
    }

    class Options : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 87, 267 );
            SetSize( 19, 19 );
            SetPressedImage( "art/intrface/login_button_down.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_MAIN_SCREEN_OPTIONS );
        }
    }

    class Text3 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 22, 1 );
            SetText( MSG_GAME( STR_LOGIN_OPTIONS ) );
            SetTextFont( FONT_FAT );
        }
    }

    class About : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 87, 297 );
            SetSize( 19, 19 );
            SetPressedImage( "art/intrface/login_button_down.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_MAIN_SCREEN_CREDITS );
        }
    }

    class Text4 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 22, 1 );
            SetText( MSG_GAME( STR_LOGIN_CREDITS ) );
            SetTextFont( FONT_FAT );
        }
    }

    class Exit : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 87, 327 );
            SetSize( 19, 19 );
            SetPressedImage( "art/intrface/login_button_down.png" );
        }

        void OnLMouseClick() override
        {
            TryExit();
        }
    }

    class Text5 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 22, 1 );
            SetText( MSG_GAME( STR_LOGIN_EXIT ) );
            SetTextFont( FONT_FAT );
        }
    }

    class InputLogin : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 80, 141 );
            SetSize( 145, 18 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetInputLength( __MaxNameLength );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( __Name );
        }
    }

    class InputPassword : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 80, 168 );
            SetSize( 145, 18 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetInputLength( __MaxNameLength );
            SetInputPassword( "#" );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( CustomCall( "GetPassword" ) );
        }
    }

    class Version : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 10, 5 );
            SetAnchor( ANCHOR_LEFT| ANCHOR_TOP );
            SetText( MSG_GAME( STR_VERSION_INFO ) );
            SetTextColor( COLOR_WHITE );
        }
    }

    class MessageBox : GUIMessageBox
    {
        void OnConstruct() override
        {
            SetPosition( 30, 50 );
            SetSize( 370, 50 );
            SetAnchor( ANCHOR_LEFT| ANCHOR_TOP );
        }
    }

    void Init( int screenIndex )
    {
        Login _Login();
        _Login.Init( null );
        Menu _Menu();
        _Menu.Init( _Login );
        Play _Play();
        _Play.Init( _Menu );
        Text1 _Text1();
        _Text1.Init( _Play );
        Registration _Registration();
        _Registration.Init( _Menu );
        Text2 _Text2();
        _Text2.Init( _Registration );
        Options _Options();
        _Options.Init( _Menu );
        Text3 _Text3();
        _Text3.Init( _Options );
        About _About();
        _About.Init( _Menu );
        Text4 _Text4();
        _Text4.Init( _About );
        Exit _Exit();
        _Exit.Init( _Menu );
        Text5 _Text5();
        _Text5.Init( _Exit );
        InputLogin _InputLogin();
        _InputLogin.Init( _Menu );
        InputPassword _InputPassword();
        _InputPassword.Init( _Menu );
        Version _Version();
        _Version.Init( _Login );
        MessageBox _MessageBox();
        _MessageBox.Init( _Login );
        GUI_RegisterScreen( screenIndex, _Login );
    }
}

namespace Registration
{
    import void player_data_generate( int[]& params ) from "client_main";
    import bool player_data_check( int[]& params ) from "client_main";
    
    int[] ShowBaseStats = { ST_STRENGTH, ST_PERCEPTION, ST_ENDURANCE, ST_CHARISMA, ST_INTELLECT, ST_AGILITY, ST_LUCK };
    int[] ShowHealthStats = { ST_MAX_LIFE, DAMAGE_POISONED, DAMAGE_RADIATED, DAMAGE_EYE, DAMAGE_RIGHT_ARM, DAMAGE_LEFT_ARM, DAMAGE_RIGHT_LEG, DAMAGE_LEFT_LEG };
    int[] ShowExtendedStats = { ST_ARMOR_CLASS, ST_ACTION_POINTS, ST_CARRY_WEIGHT, ST_MELEE_DAMAGE, ST_NORMAL_RESIST, ST_POISON_RESISTANCE, ST_RADIATION_RESISTANCE, ST_CRIT_RESIST, ST_HEALING_RATE, ST_CRITICAL_CHANCE };
    int[] ShowTraitsLeft = { TRAIT_FAST_METABOLISM, TRAIT_BRUISER, TRAIT_SMALL_FRAME, TRAIT_ONE_HANDER, TRAIT_FINESSE, TRAIT_KAMIKAZE, TRAIT_HEAVY_HANDED, TRAIT_FAST_SHOT };
    int[] ShowTraitsRight = { TRAIT_BLOODY_MESS, TRAIT_JINXED, TRAIT_GOOD_NATURED, TRAIT_CHEM_RELIANT, TRAIT_CHEM_RESISTANT, TRAIT_SEX_APPEAL, TRAIT_SKILLED, TRAIT_NIGHT_PERSON };
    int[] ShowSkills = { 
		SK_SMALL_GUNS, 
		SK_BIG_GUNS, 
		SK_ENERGY_WEAPONS, 
		SK_UNARMED, 
		SK_MELEE_WEAPONS, 
		SK_THROWING, 
		SK_TRAPS, 
		SK_FIRST_AID, /*SK_DOCTOR, */
		SK_SNEAK, 
		//SK_LOCKPICK, 
		//SK_STEAL, 
		//SK_SCIENCE,
		SK_MINING,
		SK_BOTANY,
		SK_PHARMA,
		SK_SKINNING,
		SK_REPAIR,
		SK_ELECTRONICS,
		SK_GUNSMITH,
		SK_ARMOURER,
		SK_BARTER 
		//SK_BARTER
		/*, SK_GAMBLING, SK_OUTDOORSMAN*/ };

    
    int[] Params( PARAMS_COUNT );
    
    int CurTip = -1;
    
    int GetParam( int param )
    {
        return Params[ param ];
    }
    
    void GenParams()
    {
        player_data_generate( Params );
    }
    
    int GetUnspentStatPoints()
    {
        int unspent = __StartSpecialPoints;
        for( uint i = 0; i < ShowBaseStats.length(); i++ )
            unspent -= __RegParams[ ShowBaseStats[ i ] ];
        return unspent;
    }
    
    string@ FormatXX( int value )
    {
        value = CLAMP( value, 0, 99 );
        return value < 10 ? "0" + value : "" + value;
    }

    class Character : GUIScreen
    {
        void OnConstruct() override
        {
            SetModal( true );
            SetSize( 800, 600 );
            SetDock( DOCK_FILL );
        }

        void OnInit() override
        {
            GenParams();
        }
    }

    class Main : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 80, 60 );
            SetSize( 640, 480 );
            SetBackgroundImage( "art/intrface/registr.png" );
        }
    }

    class BaseStats : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 15, 35 );
            SetCellPrototype( "BaseStat" );
            SetGridSize( ShowBaseStats.length() );
        }
    }

    class BaseStat : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetSize( 155, 33 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowBaseStats[ cellIndex ];
        }
    }

    class StatName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 4, 4 );
            SetSize( 40, 20 );
            SetText( "TXT" );
            SetTextFont( FONT_BIG );
            SetTextColor( COLOR_SAND );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_INV_SHORT_SPECIAL( cast< BaseStat >( Parent ).Param ) );
        }
    }

    class StatValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 44, 2 );
            SetSize( 30, 24 );
            SetTextFont( FONT_BIG_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return FormatXX( GetParam( cast< BaseStat >( Parent ).Param ) );
        }
    }

    class StatValueDesc : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 87, 4 );
            SetSize( 45, 20 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        string@ get_Text() override
        {
            return MSG_GAME( STR_STAT_LEVEL_ABB( GetParam( cast< BaseStat >( Parent ).Param ) ) );
        }
    }

    class StatInc : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 134, 4 );
            SetSize( 16, 12 );
            SetPressedImage( "art/intrface/plus_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            int param = cast< BaseStat >( Parent ).Param;
            if( Params[ param ] < 10 && GetUnspentStatPoints() > 0 )
            {
                __RegParams[ param ]++;
                GenParams();
            }
        }
    }

    class StatDec : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 134, 15 );
            SetSize( 16, 12 );
            SetPressedImage( "art/intrface/minus_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            int param = cast< BaseStat >( Parent ).Param;
            if( Params[ param ] > 1 )
            {
                __RegParams[ param ]--;
                GenParams();
            }
        }
    }

    class BaseStatPoints : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 25, 276 );
        }
    }

    class Title1 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -4, 4 );
            SetSize( 100, 30 );
            SetText( MSG_GAME( STR_REG_SPECIAL_SUM ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class StatPointsValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 97, 2 );
            SetSize( 34, 30 );
            SetTextFont( FONT_BIG_NUM );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return FormatXX( GetUnspentStatPoints() );
        }
    }

    class HealthStats : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 192, 42 );
            SetCellPrototype( "HealthStat" );
            SetGridSize( ShowHealthStats.length() );
        }
    }

    class HealthStat : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetSize( 122, 14 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowHealthStats[ cellIndex ];
        }
    }

    class StatDesc : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 122, 13 );
            SetTextFlags( FT_CENTERY );
        }

        void OnDraw() override
        {
            int param = cast< HealthStat >( Parent ).Param;
            uint color;
            if( param == DAMAGE_RADIATED )
                color = ( GetParam( ST_RADIATION_LEVEL ) != 0 ? 0 : COLOR_DARK );
            else if( param == DAMAGE_POISONED )
                color = ( GetParam( ST_POISONING_LEVEL ) != 0 ? 0 : COLOR_DARK );
            else
                color = ( GetParam( param ) != 0 ? 0: COLOR_DARK );
            SetTextColor( color );
        }

        string@ get_Text() override
        {
            int param = cast< HealthStat >( Parent ).Param;
            if( param == ST_MAX_LIFE )
                return MSG_GAME( STR_INV_HP ) + "  " + GetParam( ST_CURRENT_HP ) + " / " + GetParam( ST_MAX_LIFE );
            return MSG_GAME( STR_PARAM_NAME( param ) );
        }
    }

    class ExtendedStats : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 192, 179 );
            SetCellPrototype( "ExtendedStat" );
            SetGridSize( ShowExtendedStats.length() );
        }
    }

    class ExtendedStat : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetSize( 122, 13 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowExtendedStats[ cellIndex ];
        }
    }

    class StatName2 : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 100, 13 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            int param = cast< ExtendedStat >( Parent ).Param;
            Text = MSG_GAME( STR_PARAM_NAME_SHORT( param ) );
        }
    }

    class StatValue2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 98, 0 );
            SetSize( 25, 13 );
            SetTextFlags( FT_CENTERY );
        }

        string@ get_Text() override
        {
            int param = cast< ExtendedStat >( Parent ).Param;
            string text;
            if( param == ST_CARRY_WEIGHT )
                text = "" + ( GetParam( param ) / 1000 );
            else if( param == ST_NORMAL_RESIST || param == ST_NORMAL_RESIST )
                text = "" + GetParam( param ) + "%";
            else
                text = "" + GetParam( param );
            return text;
        }
    }

    class Traits : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 19, 347 );
        }
    }

    class TraitsLeft : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 4, 6 );
            SetCellPrototype( "TraitLeft" );
            SetGridSize( ShowTraitsLeft.length() );
        }
    }

    class TraitLeft : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetSize( 150, 13 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowTraitsLeft[ cellIndex ];
        }
    }

    class Switcher1 : GUIButton
    {
        void OnConstruct() override
        {
            SetSize( 17, 11 );
            SetPressedImage( "art/intrface/tag_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            int param = cast< TraitLeft >( Parent ).Param;
            if( __RegParams[ param ] == 0 )
            {
                int count = 0;
                for( uint i = TRAIT_BEGIN; i <= TRAIT_END; i++ )
                    if( __RegParams[ i ] != 0 )
                        count++;
                 if( count < 2 )
                     __RegParams[ param ] = 1;
            }
            else
            {
                __RegParams[ param ] = 0;
            }
            
            Parent.FindText( "TraitName1" ).SetTextColor( __RegParams[ param ] != 0 ? COLOR_LGRAY : 0 );
            
            GenParams();
        }
    }

    class TraitName1 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, -1 );
            SetSize( 140, 13 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_PARAM_NAME( cast< TraitLeft >( Parent ).Param ) );
        }
    }

    class TraitsRight : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 154, 6 );
            SetCellPrototype( "TraitRight" );
            SetGridSize( ShowTraitsRight.length() );
        }
    }

    class TraitRight : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetSize( 148, 13 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowTraitsRight[ cellIndex ];
        }
    }

    class Switcher2 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 125, 0 );
            SetSize( 17, 11 );
            SetPressedImage( "art/intrface/tag_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            int param = cast< TraitRight >( Parent ).Param;
            if( __RegParams[ param ] == 0 )
            {
                int count = 0;
                for( uint i = TRAIT_BEGIN; i <= TRAIT_END; i++ )
                    if( __RegParams[ i ] != 0 )
                        count++;
                 if( count < 2 )
                     __RegParams[ param ] = 1;
            }
            else
            {
                __RegParams[ param ] = 0;
            }
            
            Parent.FindText( "TraitName2" ).SetTextColor( __RegParams[ param ] != 0 ? COLOR_LGRAY : 0 );
            
            GenParams();
        }
    }

    class TraitName2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 10, -1 );
            SetSize( 110, 13 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_PARAM_NAME( cast< TraitRight >( Parent ).Param ) );
        }
    }

    class Skills : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 348, 26 );
            SetCellPrototype( "Skill" );
            SetGridSize( ShowSkills.length() );
        }
    }

    class Skill : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetSize( 280, 11 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowSkills[ cellIndex ];
        }
    }

    class TagSkill : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -2, 0 );
            SetSize( 17, 11 );
            SetPressedImage( "art/intrface/tag_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            int param = cast< Skill >( Parent ).Param;
            int freeTagSkills = __StartTagSkillPoints - ( __RegParams[ TAG_SKILL1 ] != 0 ? 1 : 0 ) - ( __RegParams[ TAG_SKILL2 ] != 0 ? 1 : 0 ) - ( __RegParams[ TAG_SKILL3 ] != 0 ? 1 : 0 ) - ( __RegParams[ TAG_SKILL4 ] != 0 ? 1 : 0 );
            
            if( __RegParams[ TAG_SKILL1 ] == param )
                __RegParams[ TAG_SKILL1 ] = 0;
            else if( __RegParams[ TAG_SKILL2 ] == param )
                __RegParams[ TAG_SKILL2 ] = 0;
            else if( __RegParams[ TAG_SKILL3 ] == param )
                __RegParams[ TAG_SKILL3 ] = 0;
            else if( __RegParams[ TAG_SKILL4 ] == param )
                __RegParams[ TAG_SKILL4 ] = 0;
            else if( __RegParams[ TAG_SKILL1 ] == 0 && freeTagSkills > 0 )
                __RegParams[ TAG_SKILL1 ] = param;
            else if( __RegParams[ TAG_SKILL2 ] == 0 && freeTagSkills > 0 )
                __RegParams[ TAG_SKILL2 ] = param;
            else if( __RegParams[ TAG_SKILL3 ] == 0 && freeTagSkills > 0 )
                __RegParams[ TAG_SKILL3 ] = param;
            else if( __RegParams[ TAG_SKILL4 ] == 0 && freeTagSkills > 0 )
                __RegParams[ TAG_SKILL4 ] = param;
            
            bool tagged = ( __RegParams[ TAG_SKILL1 ] == param || __RegParams[ TAG_SKILL2 ] == param || __RegParams[ TAG_SKILL3 ] == param || __RegParams[ TAG_SKILL4 ] == param );
            Parent.FindText( "SkillName" ).SetTextColor( tagged ? COLOR_LGRAY : 0 );
            Parent.FindText( "SkillValue" ).SetTextColor( tagged ? COLOR_LGRAY : 0 );
            
            GenParams();
        }
    }

    class SkillName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 22, -1 );
            SetSize( 200, 13 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_PARAM_NAME( cast< Skill >( Parent ).Param ) );
        }
    }

    class SkillValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 225, -1 );
            SetSize( 40, 13 );
            SetTextFlags( FT_CENTERY );
        }

        string@ get_Text() override
        {
            return GetParam( cast< Skill >( Parent ).Param ) + "%";
        }
    }

    class Title3 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 19, -25 );
            SetSize( 150, 24 );
            SetText( MSG_GAME( STR_CHA_SKILLS ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class UnspentSkillPoints : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 352, 227 );
        }
    }

    class Title2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 1, 1 );
            SetSize( 150, 26 );
            SetText( MSG_GAME( STR_REG_UNSPENT_TAGS ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class UnspentValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 171, 1 );
            SetSize( 30, 25 );
            SetTextFont( FONT_BIG_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            int freeTagSkills = __StartTagSkillPoints - ( __RegParams[ TAG_SKILL1 ] != 0 ? 1 : 0 ) - ( __RegParams[ TAG_SKILL2 ] != 0 ? 1 : 0 ) - ( __RegParams[ TAG_SKILL3 ] != 0 ? 1 : 0 ) - ( __RegParams[ TAG_SKILL4 ] != 0 ? 1 : 0 );
            return FormatXX( freeTagSkills );
        }
    }

    class Tip : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 342, 264 );
        }

        void OnDraw() override
        {
            GUIObject@ obj = GUI_GetFocusedObject();
            if( obj is null )
                return;
            
            int param = -1;
            
            #define CHECK_PARAM_PARENT #( className ) if( param == -1 && cast< className >( obj.Parent ) !is null ) param = cast< className >( obj.Parent ).Param
            //#define CHECK_PARENT #( className, p ) if( param == -1 && cast< className >( obj.Parent ) !is null ) param = p
            
            CHECK_PARAM_PARENT( BaseStat );
            CHECK_PARAM_PARENT( HealthStat );
            CHECK_PARAM_PARENT( ExtendedStat );
            CHECK_PARAM_PARENT( TraitLeft );
            CHECK_PARAM_PARENT( TraitRight );
            CHECK_PARAM_PARENT( Skill );
            
            if( param != -1 && CurTip != param )
            {
                CurTip = param;
                FindText( "Name" ).Text = MSG_GAME( STR_PARAM_NAME( param ) );
                FindText( "Desc" ).Text = MSG_GAME( STR_PARAM_DESC( param ) );
                FindPanel( "Image" ).SetBackgroundImage( GetConstantName( CONSTANTS_PICTURE, param ) );
            }
        }
    }

    class Image : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 141, 44 );
        }
    }

    class Name : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 8, 7 );
            SetSize( 270, 31 );
            SetTextFont( FONT_THIN );
            SetTextColor( COLOR_BLACK );
        }
    }

    class Desc : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 8, 44 );
            SetSize( 150, 124 );
            SetTextColor( COLOR_BLACK );
        }
    }

    class Buttons : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 334, 448 );
        }
    }

    class Print : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 31, 0 );
        }
    }

    class Button1 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -21, 6 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }
    }

    class Text7 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -2, 5 );
            SetText( MSG_GAME( STR_CHA_PRINT ) );
            SetTextFont( FONT_FAT );
            SetTextColor( COLOR_SAND );
        }
    }

    class Done : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 141, 0 );
        }
    }

    class Button2 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -19, 6 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            CustomCall( "Register" );
        }
    }

    class Text8 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -2, 5 );
            SetText( MSG_GAME( STR_CHA_OK ) );
            SetTextFont( FONT_FAT );
            SetTextColor( COLOR_SAND );
        }
    }

    class Back : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 237, 0 );
        }
    }

    class Button3 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -18, 6 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            TryExit();
        }
    }

    class Text9 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -1, 5 );
            SetText( MSG_GAME( STR_CHA_CANCEL ) );
            SetTextFont( FONT_FAT );
            SetTextColor( COLOR_SAND );
        }
    }

    class CharacterName : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 21, 1 );
        }
    }

    class Button4 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -10, -1 );
            SetSize( 145, 35 );
            SetPressedImage( "art/intrface/name_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            Screen.FindPanel( "CharacterNamePopUp" ).SetActive( true );
        }
    }

    class CharacterText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 67, 13 );
            SetNotHittable( true );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        string@ get_Text() override
        {
            return __RegName;
        }
    }

    class CharacterAge : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 160, 1 );
        }
    }

    class Button5 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -6, -1 );
            SetSize( 81, 32 );
            SetPressedImage( "art/intrface/age_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            Screen.FindPanel( "CharacterAgePopUp" ).SetActive( true );
        }
    }

    class AgeText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 39, 13 );
            SetNotHittable( true );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        string@ get_Text() override
        {
            return "" + GetParam( ST_AGE );
        }
    }

    class CharacterGender : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 240, 1 );
        }
    }

    class Button6 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -6, -1 );
            SetSize( 80, 32 );
            SetPressedImage( "art/intrface/gender_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            Screen.FindPanel( "CharacterGenderPopUp" ).SetActive( true );
        }
    }

    class GenderText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 32, 13 );
            SetNotHittable( true );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        string@ get_Text() override
        {
            return GetParam( ST_GENDER ) == GENDER_MALE ? MSG_GAME( STR_MALE_NAME ) : MSG_GAME( STR_FEMALE_NAME );
        }
    }

    class CharacterNamePopUp : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 21, 5 );
            SetSize( 168, 108 );
            SetBackgroundImage( "art/intrface/cha_name.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            if( ActiveSelf )
                SetActive( false );
        }

        void OnGlobalMouseDown( int button ) override
        {
            if( Active && !IsMouseHit() )
                SetActive( false );
        }

        void OnActiveChanged() override
        {
            if( Active )
                GUI_SetFocusedObject( FindTextInput( "ChaName" ) );
        }
    }

    class ChaName : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 22, 32 );
            SetSize( 120, 14 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetInputLength( __MaxNameLength );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( __RegName );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __RegName = Text;
            
            if( key == DIK_RETURN || key == DIK_NUMPADENTER )
                Parent.SetActive( false );
        }
    }

    class ChaPassword : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 22, 73 );
            SetSize( 120, 14 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetInputLength( __MaxNameLength );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( __RegPassword );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __RegPassword = Text;
            
            if( key == DIK_RETURN || key == DIK_NUMPADENTER )
                Parent.SetActive( false );
        }
    }

    class CharacterAgePopUp : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 126, 5 );
            SetSize( 139, 43 );
            SetBackgroundImage( "art/intrface/cha_age.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            if( ActiveSelf )
                SetActive( false );
        }

        void OnGlobalMouseDown( int button ) override
        {
            if( Active && !IsMouseHit() )
                SetActive( false );
        }
    }

    class IncAge : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 101, 11 );
            SetSize( 20, 18 );
            SetPressedImage( "art/intrface/age_inc_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            __RegParams[ ST_AGE ]++;
            if( __RegParams[ ST_AGE ] > AGE_MAX )
                __RegParams[ ST_AGE ] = AGE_MIN;
            GenParams();
        }
    }

    class DecAge : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 17, 11 );
            SetSize( 20, 18 );
            SetPressedImage( "art/intrface/age_dec_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            __RegParams[ ST_AGE ]--;
            if( __RegParams[ ST_AGE ] < AGE_MIN )
                __RegParams[ ST_AGE ] = AGE_MAX;
            GenParams();
        }
    }

    class AgeValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 54, 8 );
            SetSize( 30, 24 );
            SetTextFont( FONT_BIG_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return FormatXX( GetParam( ST_AGE ) );
        }
    }

    class CharacterGenderPopUp : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 208, 5 );
            SetSize( 139, 72 );
            SetBackgroundImage( "art/intrface/cha_sex.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            if( ActiveSelf )
                SetActive( false );
        }

        void OnGlobalMouseDown( int button ) override
        {
            if( Active && !IsMouseHit() )
                SetActive( false );
        }
    }

    class Male : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 17, 16 );
            SetSize( 45, 43 );
            SetPressedImage( "art/intrface/male_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            __RegParams[ ST_GENDER ] = GENDER_MALE;
            GenParams();
            SetSwitch( true );
            Parent.FindButton( "Female" ).SetSwitch( false );
        }

        void OnActiveChanged() override
        {
            if( Active )
                SetSwitch( __RegParams[ ST_GENDER ] == GENDER_MALE );
        }
    }

    class Female : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 76, 16 );
            SetSize( 45, 42 );
            SetPressedImage( "art/intrface/female_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            __RegParams[ ST_GENDER ] = GENDER_FEMALE;
            GenParams();
            SetSwitch( true );
            Parent.FindButton( "Male" ).SetSwitch( false );
        }

        void OnActiveChanged() override
        {
            if( Active )
                SetSwitch( __RegParams[ ST_GENDER ] == GENDER_FEMALE );
        }
    }

    class MessageBox : GUIMessageBox
    {
        void OnConstruct() override
        {
            SetPosition( 30, 0 );
            SetSize( 700, 50 );
            SetAnchor( ANCHOR_LEFT| ANCHOR_TOP );
        }
    }

    void Init( int screenIndex )
    {
        Character _Character();
        _Character.Init( null );
        Main _Main();
        _Main.Init( _Character );
        BaseStats _BaseStats();
        _BaseStats.Init( _Main );
        BaseStat _BaseStat();
        _BaseStat.Init( _BaseStats );
        StatName _StatName();
        _StatName.Init( _BaseStat );
        StatValue _StatValue();
        _StatValue.Init( _BaseStat );
        StatValueDesc _StatValueDesc();
        _StatValueDesc.Init( _BaseStat );
        StatInc _StatInc();
        _StatInc.Init( _BaseStat );
        StatDec _StatDec();
        _StatDec.Init( _BaseStat );
        BaseStatPoints _BaseStatPoints();
        _BaseStatPoints.Init( _Main );
        Title1 _Title1();
        _Title1.Init( _BaseStatPoints );
        StatPointsValue _StatPointsValue();
        _StatPointsValue.Init( _BaseStatPoints );
        HealthStats _HealthStats();
        _HealthStats.Init( _Main );
        HealthStat _HealthStat();
        _HealthStat.Init( _HealthStats );
        StatDesc _StatDesc();
        _StatDesc.Init( _HealthStat );
        ExtendedStats _ExtendedStats();
        _ExtendedStats.Init( _Main );
        ExtendedStat _ExtendedStat();
        _ExtendedStat.Init( _ExtendedStats );
        StatName2 _StatName2();
        _StatName2.Init( _ExtendedStat );
        StatValue2 _StatValue2();
        _StatValue2.Init( _ExtendedStat );
		
		// Kriz
        //Traits _Traits();
        //_Traits.Init( _Main );
        //TraitsLeft _TraitsLeft();
        //_TraitsLeft.Init( _Traits );
        //TraitLeft _TraitLeft();
        //_TraitLeft.Init( _TraitsLeft );
        //Switcher1 _Switcher1();
        //_Switcher1.Init( _TraitLeft );
        //TraitName1 _TraitName1();
        //_TraitName1.Init( _TraitLeft );
        //TraitsRight _TraitsRight();
        //_TraitsRight.Init( _Traits );
        //TraitRight _TraitRight();
        //_TraitRight.Init( _TraitsRight );
        //Switcher2 _Switcher2();
        //_Switcher2.Init( _TraitRight );
        //TraitName2 _TraitName2();
        //_TraitName2.Init( _TraitRight );
        Skills _Skills();
        _Skills.Init( _Main );
        Skill _Skill();
        _Skill.Init( _Skills );
        TagSkill _TagSkill();
        _TagSkill.Init( _Skill );
        SkillName _SkillName();
        _SkillName.Init( _Skill );
        SkillValue _SkillValue();
        _SkillValue.Init( _Skill );
        Title3 _Title3();
        _Title3.Init( _Skills );
        UnspentSkillPoints _UnspentSkillPoints();
        _UnspentSkillPoints.Init( _Main );
        Title2 _Title2();
        _Title2.Init( _UnspentSkillPoints );
        UnspentValue _UnspentValue();
        _UnspentValue.Init( _UnspentSkillPoints );
        Tip _Tip();
        _Tip.Init( _Main );
        Image _Image();
        _Image.Init( _Tip );
        Name _Name();
        _Name.Init( _Tip );
        Desc _Desc();
        _Desc.Init( _Tip );
        Buttons _Buttons();
        _Buttons.Init( _Main );
        Print _Print();
        _Print.Init( _Buttons );
        Button1 _Button1();
        _Button1.Init( _Print );
        Text7 _Text7();
        _Text7.Init( _Print );
        Done _Done();
        _Done.Init( _Buttons );
        Button2 _Button2();
        _Button2.Init( _Done );
        Text8 _Text8();
        _Text8.Init( _Done );
        Back _Back();
        _Back.Init( _Buttons );
        Button3 _Button3();
        _Button3.Init( _Back );
        Text9 _Text9();
        _Text9.Init( _Back );
        CharacterName _CharacterName();
        _CharacterName.Init( _Main );
        Button4 _Button4();
        _Button4.Init( _CharacterName );
        CharacterText _CharacterText();
        _CharacterText.Init( _CharacterName );
        CharacterAge _CharacterAge();
        _CharacterAge.Init( _Main );
        Button5 _Button5();
        _Button5.Init( _CharacterAge );
        AgeText _AgeText();
        _AgeText.Init( _CharacterAge );
        CharacterGender _CharacterGender();
        _CharacterGender.Init( _Main );
        Button6 _Button6();
        _Button6.Init( _CharacterGender );
        GenderText _GenderText();
        _GenderText.Init( _CharacterGender );
        CharacterNamePopUp _CharacterNamePopUp();
        _CharacterNamePopUp.Init( _Main );
        ChaName _ChaName();
        _ChaName.Init( _CharacterNamePopUp );
        ChaPassword _ChaPassword();
        _ChaPassword.Init( _CharacterNamePopUp );
        CharacterAgePopUp _CharacterAgePopUp();
        _CharacterAgePopUp.Init( _Main );
        IncAge _IncAge();
        _IncAge.Init( _CharacterAgePopUp );
        DecAge _DecAge();
        _DecAge.Init( _CharacterAgePopUp );
        AgeValue _AgeValue();
        _AgeValue.Init( _CharacterAgePopUp );
        CharacterGenderPopUp _CharacterGenderPopUp();
        _CharacterGenderPopUp.Init( _Main );
        Male _Male();
        _Male.Init( _CharacterGenderPopUp );
        Female _Female();
        _Female.Init( _CharacterGenderPopUp );
        MessageBox _MessageBox();
        _MessageBox.Init( _Character );
        GUI_RegisterScreen( screenIndex, _Character );
    }
}

namespace Options
{
    void SaveOptions()
    {
        string[] savedOptions =
        {
            "Language", "" + CustomCall( "GetLanguage" ),
            "ScreenWidth", "" + __ScreenWidth,
            "ScreenHeight", "" + __ScreenHeight,
            "FullScreen", "" + __FullScr,
            "AlwaysOnTop", "" + __AlwaysOnTop,
            "MusicVolume", "" + __MusicVolume,
            "SoundVolume", "" + __SoundVolume,
            "AlwaysRun", "" + __AlwaysRun,
            "DefaultCombatMode", "" + __DefaultCombatMode,
            "RemoteHost", "" + __Host,
            "RemotePort", "" + __Port,
            "ProxyType", "" + __ProxyType,
            "ProxyHost", "" + __ProxyHost,
            "ProxyPort", "" + __ProxyPort,
            "ProxyUser", "" + __ProxyUser,
            "ProxyPass", "" + __ProxyPass
        };
        SetUserConfig( savedOptions );
    }

    class Screen : GUIScreen
    {
        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetSize( 800, 600 );
            SetDock( DOCK_FILL );
        }
    }

    class Main : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 80, 60 );
            SetSize( 640, 480 );
            SetBackgroundImage( "art/intrface/main_menu_options.png" );
        }
    }

    class Options : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 640, 440 );
        }
    }

    class Game : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 0, 20 );
        }
    }

    class Language : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 10 );
            SetText( MSG_GAME( STR_OPTIONS_LANGUAGE ) );
        }
    }

    class Russian : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( CustomCall( "GetLanguage" ) == "russ" );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetLanguage russ" );
            GUI_Callback_OnLanguageChanged();
            SaveOptions();
        }
    }

    class Text1 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_LANGUAGE_RUSSIAN ) );
        }
    }

    class English : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 330, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( CustomCall( "GetLanguage" ) == "engl" );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetLanguage engl" );
            GUI_Callback_OnLanguageChanged();
            SaveOptions();
        }
    }

    class Text2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_LANGUAGE_ENGLISH ) );
        }
    }

    int[] ScreenWidthOpt = { 800, 1024, 1280, 1280, 1366, 1920 };
    int[] ScreenHeightOpt = { 600, 768, 800, 1024, 768, 1080 };

    class Resolution : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 40 );
            SetText( MSG_GAME( STR_OPTIONS_RESOLUTION ) );
        }
    }

    class Resolution1 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, -8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 0 ] && __ScreenHeight == ScreenHeightOpt[ 0 ] );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 0 ] + " " + ScreenHeightOpt[ 0 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
        }
    }

    class Text14 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( ScreenWidthOpt[ 0 ] + "x" + ScreenHeightOpt[ 0 ] );
        }
    }

    class Resolution2 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 240, 8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 1 ] && __ScreenHeight == ScreenHeightOpt[ 1 ] );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 1 ] + " " + ScreenHeightOpt[ 1 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
        }
    }

    class Text15 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( ScreenWidthOpt[ 1 ] + "x" + ScreenHeightOpt[ 1 ] );
        }
    }

    class Resolution3 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 300, -8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 2 ] && __ScreenHeight == ScreenHeightOpt[ 2 ] );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 2 ] + " " + ScreenHeightOpt[ 2 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
        }
    }

    class Text16 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( ScreenWidthOpt[ 2 ] + "x" + ScreenHeightOpt[ 2 ] );
        }
    }

    class Resolution4 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 360, 8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 3 ] && __ScreenHeight == ScreenHeightOpt[ 3 ] );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 3 ] + " " + ScreenHeightOpt[ 3 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
        }
    }

    class Text17 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( ScreenWidthOpt[ 3 ] + "x" + ScreenHeightOpt[ 3 ] );
        }
    }

    class Resolution5 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 420, -8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 4 ] && __ScreenHeight == ScreenHeightOpt[ 4 ] );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 4 ] + " " + ScreenHeightOpt[ 4 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
        }
    }

    class Text18 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( ScreenWidthOpt[ 4 ] + "x" + ScreenHeightOpt[ 4 ] );
        }
    }

    class Resolution6 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 480, 8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 5 ] && __ScreenHeight == ScreenHeightOpt[ 5 ] );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 5 ] + " " + ScreenHeightOpt[ 5 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
        }
    }

    class Text19 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( ScreenWidthOpt[ 5 ] + "x" + ScreenHeightOpt[ 5 ] );
        }
    }

    class FullScreen : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 70 );
            SetText( MSG_GAME( STR_OPTIONS_FULL_SCREEN ) );
        }
    }

    class CheckBox1 : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __FullScr );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SwitchFullscreen" );
            SaveOptions();
        }
    }

    class AlwaysOnTop : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 100 );
            SetText( MSG_GAME( STR_OPTIONS_ALWAYS_ON_TOP ) );
        }
    }

    class CheckBox2 : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __AlwaysOnTop );
        }

        void OnLMouseClick() override
        {
            __AlwaysOnTop = IsChecked;
            SaveOptions();
        }
    }

    class Music : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 130 );
            SetText( MSG_GAME( STR_OPTIONS_MUSIC ) );
        }
    }

    class MusicDec : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            if( __MusicVolume > 0 )
            {
                __MusicVolume--;
                 SaveOptions();
            }
        }
    }

    class MusicInc : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 280, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            if( __MusicVolume < 100 )
            {
                __MusicVolume++;
                SaveOptions();
            }
        }
    }

    class MusicValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 235, 0 );
        }

        string@ get_Text() override
        {
            return "" + __MusicVolume;
        }
    }

    class Sound : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 160 );
            SetText( MSG_GAME( STR_OPTIONS_SOUND ) );
        }
    }

    class SoundDec : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            if( __SoundVolume > 0 )
            {
                __SoundVolume--;
                SaveOptions();
            }
        }
    }

    class SoundInc : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 280, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            if( __SoundVolume < 100 )
            {
                __SoundVolume++;
                SaveOptions();
            }
        }
    }

    class SoundValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 235, 0 );
        }

        string@ get_Text() override
        {
            return "" + __SoundVolume;
        }
    }

    class AlwaysRun : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 190 );
            SetText( MSG_GAME( STR_OPTIONS_ALWAYS_RUN ) );
        }
    }

    class CheckBox3 : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __AlwaysRun );
        }

        void OnLMouseClick() override
        {
            __AlwaysRun = IsChecked;
            SaveOptions();
        }
    }

    class CombatMode : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 220 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MODE ) );
        }
    }

    class Both : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, -8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __DefaultCombatMode == COMBAT_MODE_ANY );
        }

        void OnLMouseClick() override
        {
            __DefaultCombatMode = COMBAT_MODE_ANY;
            SaveOptions();
        }
    }

    class Text5 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MODE_BOTH ) );
        }
    }

    class RealTime : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 280, 8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __DefaultCombatMode == COMBAT_MODE_REAL_TIME );
        }

        void OnLMouseClick() override
        {
            __DefaultCombatMode = COMBAT_MODE_REAL_TIME;
            SaveOptions();
        }
    }

    class Text6 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MODE_RT ) );
        }
    }

    class TurnBased : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 380, -8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __DefaultCombatMode == COMBAT_MODE_TURN_BASED );
        }

        void OnLMouseClick() override
        {
            __DefaultCombatMode = COMBAT_MODE_TURN_BASED;
            SaveOptions();
        }
    }

    class Text7 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MODE_TB ) );
        }
    }

    class CombatMessages : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 250 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MESSAGES ) );
        }
    }

    class Verbose : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __CombatMessagesType == 0 );
        }

        void OnLMouseClick() override
        {
            __CombatMessagesType = 0;
            SaveOptions();
        }
    }

    class Text8 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MESSAGES_FULL ) );
        }
    }

    class Brief : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 330, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __CombatMessagesType != 0 );
        }

        void OnLMouseClick() override
        {
            __CombatMessagesType = 1;
            SaveOptions();
        }
    }

    class Text9 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MESSAGES_SHORT ) );
        }
    }

    class GameServer : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 280 );
            SetText( MSG_GAME( STR_OPTIONS_GAME_SERVER ) );
        }
    }

    class Panel1 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 180, -2 );
            SetSize( 250, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class Panel2 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 450, -2 );
            SetSize( 50, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class Host : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 250, 12 );
            SetText( __Host );
            SetTextFlags( FT_CENTERX );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __Host = Text;
            SaveOptions();
        }
    }

    class Port : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 450, 0 );
            SetSize( 50, 12 );
            SetText( "" + __Port );
            SetTextFlags( FT_CENTERX );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __Port = Text.toInt( __Port );
            Text = "" + __Port;
            SaveOptions();
        }
    }

    class ProxyType : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 310 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_TYPE ) );
        }
    }

    class ProxyNone : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ProxyType == 0 );
        }

        void OnLMouseClick() override
        {
            __ProxyType = 0;
            SaveOptions();
        }
    }

    class Text10 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_TYPE_NONE ) );
        }
    }

    class ProxySocks4 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 280, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ProxyType == 1 );
        }

        void OnLMouseClick() override
        {
            __ProxyType = 1;
            SaveOptions();
        }
    }

    class Text11 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_TYPE_SOCKS4 ) );
        }
    }

    class ProxySocks5 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 380, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ProxyType == 2 );
        }

        void OnLMouseClick() override
        {
            __ProxyType = 2;
            SaveOptions();
        }
    }

    class Text12 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_TYPE_SOCKS5 ) );
        }
    }

    class ProxyHttp : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 480, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ProxyType == 3 );
        }

        void OnLMouseClick() override
        {
            __ProxyType = 3;
            SaveOptions();
        }
    }

    class Text13 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_TYPE_HTTP ) );
        }
    }

    class ProxyServer : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 340 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_SERVER ) );
        }
    }

    class Panel3 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 180, -2 );
            SetSize( 250, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class Panel4 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 450, -2 );
            SetSize( 50, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class ProxyHost : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 250, 12 );
            SetText( __ProxyHost );
            SetTextFlags( FT_CENTERX );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __Host = Text;
            SaveOptions();
        }
    }

    class ProxyPort : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 450, 0 );
            SetSize( 50, 12 );
            SetText( "" + __ProxyPort );
            SetTextFlags( FT_CENTERX );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __ProxyPort = Text.toInt( __ProxyPort );
            Text = "" + __ProxyPort;
            SaveOptions();
        }
    }

    class ProxyAccess : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 370 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_ACCESS ) );
        }
    }

    class Panel5 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 180, -2 );
            SetSize( 150, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class Panel6 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 350, -2 );
            SetSize( 150, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class ProxyLogin : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 150, 12 );
            SetText( __ProxyUser );
            SetTextFlags( FT_CENTERX );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __ProxyUser = Text;
            SaveOptions();
        }
    }

    class ProxyPassword : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 350, 0 );
            SetSize( 150, 12 );
            SetText( __ProxyPass );
            SetTextFlags( FT_CENTERX );
            SetInputPassword( "#" );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __ProxyPass = Text;
            SaveOptions();
        }
    }

    class Back : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 460, 450 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_MAIN_SCREEN_LOGIN );
        }
    }

    class Text3 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_BACK ) );
            SetTextFont( FONT_FAT );
        }
    }

    void Init( int screenIndex )
    {
        Screen _Screen();
        _Screen.Init( null );
        Main _Main();
        _Main.Init( _Screen );
        Options _Options();
        _Options.Init( _Main );
        Game _Game();
        _Game.Init( _Options );
        Language _Language();
        _Language.Init( _Game );
        Russian _Russian();
        _Russian.Init( _Language );
        Text1 _Text1();
        _Text1.Init( _Russian );
        English _English();
        _English.Init( _Language );
        Text2 _Text2();
        _Text2.Init( _English );
        Resolution _Resolution();
        _Resolution.Init( _Game );
        Resolution1 _Resolution1();
        _Resolution1.Init( _Resolution );
        Text14 _Text14();
        _Text14.Init( _Resolution1 );
        Resolution2 _Resolution2();
        _Resolution2.Init( _Resolution );
        Text15 _Text15();
        _Text15.Init( _Resolution2 );
        Resolution3 _Resolution3();
        _Resolution3.Init( _Resolution );
        Text16 _Text16();
        _Text16.Init( _Resolution3 );
        Resolution4 _Resolution4();
        _Resolution4.Init( _Resolution );
        Text17 _Text17();
        _Text17.Init( _Resolution4 );
        Resolution5 _Resolution5();
        _Resolution5.Init( _Resolution );
        Text18 _Text18();
        _Text18.Init( _Resolution5 );
        Resolution6 _Resolution6();
        _Resolution6.Init( _Resolution );
        Text19 _Text19();
        _Text19.Init( _Resolution6 );
        FullScreen _FullScreen();
        _FullScreen.Init( _Game );
        CheckBox1 _CheckBox1();
        _CheckBox1.Init( _FullScreen );
        AlwaysOnTop _AlwaysOnTop();
        _AlwaysOnTop.Init( _Game );
        CheckBox2 _CheckBox2();
        _CheckBox2.Init( _AlwaysOnTop );
        Music _Music();
        _Music.Init( _Game );
        MusicDec _MusicDec();
        _MusicDec.Init( _Music );
        MusicInc _MusicInc();
        _MusicInc.Init( _Music );
        MusicValue _MusicValue();
        _MusicValue.Init( _Music );
        Sound _Sound();
        _Sound.Init( _Game );
        SoundDec _SoundDec();
        _SoundDec.Init( _Sound );
        SoundInc _SoundInc();
        _SoundInc.Init( _Sound );
        SoundValue _SoundValue();
        _SoundValue.Init( _Sound );
        AlwaysRun _AlwaysRun();
        _AlwaysRun.Init( _Game );
        CheckBox3 _CheckBox3();
        _CheckBox3.Init( _AlwaysRun );
        CombatMode _CombatMode();
        _CombatMode.Init( _Game );
        Both _Both();
        _Both.Init( _CombatMode );
        Text5 _Text5();
        _Text5.Init( _Both );
        RealTime _RealTime();
        _RealTime.Init( _CombatMode );
        Text6 _Text6();
        _Text6.Init( _RealTime );
        TurnBased _TurnBased();
        _TurnBased.Init( _CombatMode );
        Text7 _Text7();
        _Text7.Init( _TurnBased );
        CombatMessages _CombatMessages();
        _CombatMessages.Init( _Game );
        Verbose _Verbose();
        _Verbose.Init( _CombatMessages );
        Text8 _Text8();
        _Text8.Init( _Verbose );
        Brief _Brief();
        _Brief.Init( _CombatMessages );
        Text9 _Text9();
        _Text9.Init( _Brief );
        GameServer _GameServer();
        _GameServer.Init( _Game );
        Panel1 _Panel1();
        _Panel1.Init( _GameServer );
        Panel2 _Panel2();
        _Panel2.Init( _GameServer );
        Host _Host();
        _Host.Init( _GameServer );
        Port _Port();
        _Port.Init( _GameServer );
        ProxyType _ProxyType();
        _ProxyType.Init( _Game );
        ProxyNone _ProxyNone();
        _ProxyNone.Init( _ProxyType );
        Text10 _Text10();
        _Text10.Init( _ProxyNone );
        ProxySocks4 _ProxySocks4();
        _ProxySocks4.Init( _ProxyType );
        Text11 _Text11();
        _Text11.Init( _ProxySocks4 );
        ProxySocks5 _ProxySocks5();
        _ProxySocks5.Init( _ProxyType );
        Text12 _Text12();
        _Text12.Init( _ProxySocks5 );
        ProxyHttp _ProxyHttp();
        _ProxyHttp.Init( _ProxyType );
        Text13 _Text13();
        _Text13.Init( _ProxyHttp );
        ProxyServer _ProxyServer();
        _ProxyServer.Init( _Game );
        Panel3 _Panel3();
        _Panel3.Init( _ProxyServer );
        Panel4 _Panel4();
        _Panel4.Init( _ProxyServer );
        ProxyHost _ProxyHost();
        _ProxyHost.Init( _ProxyServer );
        ProxyPort _ProxyPort();
        _ProxyPort.Init( _ProxyServer );
        ProxyAccess _ProxyAccess();
        _ProxyAccess.Init( _Game );
        Panel5 _Panel5();
        _Panel5.Init( _ProxyAccess );
        Panel6 _Panel6();
        _Panel6.Init( _ProxyAccess );
        ProxyLogin _ProxyLogin();
        _ProxyLogin.Init( _ProxyAccess );
        ProxyPassword _ProxyPassword();
        _ProxyPassword.Init( _ProxyAccess );
        Back _Back();
        _Back.Init( _Main );
        Text3 _Text3();
        _Text3.Init( _Back );
        GUI_RegisterScreen( screenIndex, _Screen );
    }
}

namespace Game
{
    string@ FormatXXX( int value )
    {
        string@ result = "";
        int offs = 0;
        if( value >= 0 )
        {
            result += EncodeUTF8( '9' + 4 );
        }
        else
        {
            offs = 0x20;
            result += EncodeUTF8( '9' + offs + 3 );
            value = -value;
        }
    
        value = CLAMP( value, 0, 999 );
    
        result += EncodeUTF8( '0' + offs + value / 100 );
        result += EncodeUTF8( '0' + offs + value / 10 % 10 );
        result += EncodeUTF8( '0' + offs + value % 10 );
    
        return result;
    }

    class Screen : GUIScreen
    {
        bool isHitIfaceOnMouseDown;

        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetPosition( 82, 41 );
            SetSize( 800, 600 );
            SetDock( DOCK_FILL );
            SetNotHittable( true );
        }

        void OnGlobalMouseDown( int button ) override
        {
            if( __MapZooming && __SpritesZoomMin != __SpritesZoomMax )
            {
                if( button == MOUSE_BUTTON_WHEEL_UP )
                    ChangeZoom( __SpritesZoom - 0.01 );
                else if( button == MOUSE_BUTTON_WHEEL_DOWN )
                    ChangeZoom( __SpritesZoom + 0.01 );
                else if( button == MOUSE_BUTTON_MIDDLE )
                    ChangeZoom( 1.0 );
            }
            
            if( GetChild( 0 ).FindMouseHit() is null )
            {
                if( button == MOUSE_BUTTON_LEFT )
                    CustomCall( "GameLMouseDown" );
                else if( button == MOUSE_BUTTON_RIGHT )
                    isHitIfaceOnMouseDown = ( FindMouseHit() !is null );
            }
        }

        void OnGlobalMouseUp( int button ) override
        {
            if( GetChild( 0 ).FindMouseHit() is null )
            {
                if( button == MOUSE_BUTTON_LEFT )
                    CustomCall( "GameLMouseUp" );
                else if( button == MOUSE_BUTTON_RIGHT && !isHitIfaceOnMouseDown )
                    NextCursor();
            }
        }

        void OnGlobalMouseMove() override
        {
            CustomCall( "ProcessMouseScroll" );
        }
    }

    class Main : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 0, 475 );
            SetSize( 800, 125 );
            SetAnchor( ANCHOR_LEFT| ANCHOR_RIGHT| ANCHOR_BOTTOM );
            SetCheckTransparentOnHit( true );
            SetBackgroundImage( "art/intrface/iface.png" );
        }
    }

    class Console : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 0, -37 );
        }
    }

    class ConsoleImage : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 800, 35 );
            SetBackgroundImage( "art/intrface/panel.png" );
        }
    }

    class ConsoleText : GUIConsole
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 13, 14 );
            SetNotHittable( true );
        }

        void OnActiveChanged() override
        {
            Parent.Find( "ConsoleImage" ).SetActive( ActiveSelf ); 
        }
    }

    class MessageBoxExtended : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 0, -55 );
            SetSize( 372, 112 );
            SetBackgroundImage( "art/intrface/iface_add_mess.png" );
        }
    }

    class MessageBoxText : GUIMessageBox
    {
        void FiltersChanged()
        {
            int[] messageTypes;
            if( cast< GUICheckBox >( Parent.Find( "Filter1" ) ).IsChecked )
                messageTypes.insertLast( FOMB_TALK );
            if( cast< GUICheckBox >( Parent.Find( "Filter2" ) ).IsChecked )
                messageTypes.insertLast( FOMB_COMBAT_RESULT );
        
            if( messageTypes.length() == 0 )
                messageTypes.insertLast( FOMB_ALL );
        
            SetDisplayedMessages( messageTypes );
        }

        void OnConstruct() override
        {
            SetPosition( 34, 28 );
            SetSize( 306, 76 );
            SetAnchor( ANCHOR_TOP );
        }
    }

    class ExtendMessageBox : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 355, 60 );
            SetSize( 11, 6 );
            SetPressedImage( "art/intrface/iface_small_btn.png" );
        }

        void OnCheckedChanged() override
        {
            GUIObject@ messageBoxText = Parent.Find( "MessageBoxText" );
            GUIObject@ messageBoxExtended = Parent.Find( "MessageBoxExtended" );
            GUIObject@ console = Parent.Find( "Console" );
            
            messageBoxText.SetSize( messageBoxText.Width, IsChecked ? 131 : 76 );
            messageBoxText.SetPosition( messageBoxText.PosX, IsChecked ? -27 : 28 );
            messageBoxExtended.SetActive( IsChecked );
            console.SetPosition( 0, IsChecked ? -92 : -37 );
        }
    }

    class Filter1 : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 355, 68 );
            SetSize( 11, 6 );
            SetPressedImage( "art/intrface/iface_small_btn.png" );
        }

        void OnCheckedChanged() override
        {
            cast< MessageBoxText >( Parent.Find( "MessageBoxText" ) ).FiltersChanged();
        }
    }

    class Filter2 : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 355, 75 );
            SetSize( 11, 6 );
            SetPressedImage( "art/intrface/iface_small_btn.png" );
        }

        void OnCheckedChanged() override
        {
            cast< MessageBoxText >( Parent.Find( "MessageBoxText" ) ).FiltersChanged();
        }
    }

    class GameMenu : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 370, 87 );
            SetSize( 34, 34 );
            SetPressedImage( "art/intrface/game_menu_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_MENU );
        }
    }

    class Inventory : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 371, 65 );
            SetSize( 32, 21 );
            SetPressedImage( "art/intrface/inv_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_INVENTORY );
        }
    }

    class SwitchItems : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 378, 32 );
            SetSize( 22, 21 );
            SetPressedImage( "art/intrface/big_red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            CustomCall( "ChangeSlot" );
        }
    }

    class Skills : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 636, 32 );
            SetSize( 22, 21 );
            SetPressedImage( "art/intrface/big_red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_SKILLBOX );
        }
    }

    class Map : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 686, 46 );
            SetSize( 41, 19 );
            SetPressedImage( "art/intrface/map_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_MINIMAP );
        }
    }

    class Character : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 686, 65 );
            SetSize( 41, 19 );
            SetPressedImage( "art/intrface/cha_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_CHARACTER );
            CritterCl@ chosen = GetChosen();
            if( chosen !is null && chosen.ParamBase[ ST_UNSPENT_PERKS ] > 0 )
                ShowScreen( CLIENT_SCREEN_PERK );
        }
    }

    class PipBoy : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 686, 84 );
            SetSize( 41, 19 );
            SetPressedImage( "art/intrface/pip_boy_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_PIP_BOY );
        }
    }

    class FixBoy : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 686, 103 );
            SetSize( 41, 19 );
            SetPressedImage( "art/intrface/iface_fix.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_FIX_BOY );
        }
    }

    class Combat : GUIPanel
    {
        bool CombatActive;

        void OnConstruct() override
        {
            SetPosition( 740, 64 );
            SetBackgroundImage( "art/intrface/combat.fofrm" );
        }

        void OnInit() override
        {
            BackgroundImage.SetFirstFrame();
        }

        void OnDraw() override
        {
            CritterCl@ chosen = GetChosen();
            bool combatActive = ( chosen !is null && chosen.Param[ TO_BATTLE ] != 0 );
            if( combatActive != CombatActive )
            {
                CombatActive = combatActive;
                BackgroundImage.PlayAnimation( false, !combatActive );
                PlaySound( "ICIBOXX1" );
            }
            
            GetChild( 0 ).SetActive( CombatActive && CustomCall( "IsTurnBasedMyTurn" ) == "true" );
            GetChild( 1 ).SetActive( CombatActive && IsTurnBased() );
        }
    }

    class EndTurn : GUIButton
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 10, 5 );
            SetSize( 38, 22 );
            SetPressedImage( "art/intrface/end_turn_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            CustomCall( "EndTurn" );
        }
    }

    class EndCombat : GUICheckBox
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 10, 27 );
            SetSize( 38, 22 );
            SetPressedImage( "art/intrface/end_combat_button_dn.png" );
        }

        void OnDraw() override
        {
            CritterCl@ chosen = GetChosen();
            SetChecked( IsTurnBased() && chosen !is null && chosen.ParamBase[ MODE_END_COMBAT ] != 0 );
        }

        void OnLMouseClick() override
        {
            CustomCall( "EndCombat" );
        }
    }

    class ActionPoints : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 475, 40 );
            SetCellPrototype( "Led" );
            SetGridSize( 10 );
            SetColumns( 10 );
            SetPadding( 9, 0 );
        }

        void OnDraw() override
        {
            CritterCl@ chosen = GetChosen();
            int ap = ( chosen !is null ? chosen.Param[ ST_CURRENT_AP ] : 0 );
            uint moveAp = ( IsTurnBased() && chosen !is null ? chosen.Param[ ST_MOVE_AP ] : 0 );
            for( uint i = 0; i < Cells.length(); i++ )
            {
                uint absAp = uint( ABS( ap ) );
                bool active = ( i < absAp + moveAp );
                Cells[ i ].SetActive( active );
                if( active )
                {
                    Cells[ i ].GetChild( 0 ).SetActive( ap >= 0 && i < absAp ); // Green
                    Cells[ i ].GetChild( 1 ).SetActive( ap < 0 && i < absAp ); // Red
                    Cells[ i ].GetChild( 2 ).SetActive( i >= absAp ); // Yellow
                }
            }
        }
    }

    class Led : GUIPanel
    {
        void OnConstruct() override
        {
        }
    }

    class LedGreen : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 5, 5 );
            SetBackgroundImage( "art/intrface/led_green.png" );
        }
    }

    class LedRed : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 5, 5 );
            SetBackgroundImage( "art/intrface/led_red.png" );
        }
    }

    class LedYellow : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 5, 5 );
            SetBackgroundImage( "art/intrface/led_yellow.png" );
        }
    }

    class BreakTime : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 571, 40 );
        }

        void OnDraw() override
        {
            CritterCl@ chosen = GetChosen();
            GetChild( 0 ).SetActive( chosen !is null && chosen.IsBusy() );
        }
    }

    class BreakTimeLed : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 5, 5 );
            SetBackgroundImage( "art/intrface/led_red.png" );
        }
    }

    class HitPoints : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 633, 71 );
            SetTextFont( FONT_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            int result = 0;
            CritterCl@ chosen = GetChosen();
            if( chosen !is null )
                result = chosen.Param[ ST_CURRENT_HP ];
            return FormatXXX( result );
        }
    }

    class ArmorClass : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 633, 102 );
            SetTextFont( FONT_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            int result = 0;
            CritterCl@ chosen = GetChosen();
            if( chosen !is null )
                result = chosen.Param[ ST_ARMOR_CLASS ];
            return FormatXXX( result );
        }
    }

    class MainItemPlate : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 426, 52 );
            SetSize( 188, 67 );
            SetPressedImage( "art/intrface/iface_item.png" );
        }

        void OnMouseDown( int button ) override
        {
            if( button == MOUSE_BUTTON_LEFT || button == MOUSE_BUTTON_RIGHT )
                GetChild( 0 ).SetPosition( 0, -2 );
        }

        void OnMouseUp( int button, bool lost ) override
        {
            GetChild( 0 ).SetPosition( 0, 0 );
        }

        void OnMouseClick( int button ) override
        {
            if( button == MOUSE_BUTTON_LEFT )
                CustomCall( "UseMainItem" );
            else if( button == MOUSE_BUTTON_RIGHT )
                CustomCall( "NextItemMode" );
            else if( button == MOUSE_BUTTON_WHEEL_UP )
                CustomCall( "NextItemMode Prev" );
            else if( button == MOUSE_BUTTON_WHEEL_DOWN )
                CustomCall( "NextItemMode" );
        }
    }

    class MainItemSlot : GUIItemView
    {
        void OnConstruct() override
        {
            SetNotHittable( true );
            SetCellPrototype( "MainItemSlotCell" );
            SetGridSize( 1 );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT_HAND1 ? 0 : -1;
        }
    }

    class MainItemSlotCell : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 188, 67 );
            SetNotHittable( true );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            uint picInv = 0;
            if( item !is null )
                picInv = ( item.PicInv != 0 ? item.PicInv : item.Proto.PicInv );
            SetBackgroundImage( picInv, IMAGE_LAYOUT_ZOOM );
        }
    }

    class AmmoCount : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 7, 14 );
            SetNotHittable( true );
            SetTextFont( FONT_SPECIAL );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            SetText( item !is null && item.GetType() == ITEM_TYPE_WEAPON ? "" + item.AmmoCount : "" );
        }
    }

    class DeteriorationValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 7, 24 );
            SetNotHittable( true );
            SetTextFont( FONT_SPECIAL );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            SetText( item !is null && item.IsDeteriorable() ? item.Deterioration + "%" : "" );
        }
    }

    class UsePic : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 163, 8 );
            SetSize( 17, 12 );
            SetAnchor( ANCHOR_RIGHT| ANCHOR_TOP );
            SetNotHittable( true );
            SetBackgroundImage( "art/intrface/ap_pic.png" );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            uint usePic = 0;
            
            CritterCl@ chosen = GetChosen();
            uint8 mode;
            const ProtoItem@ proto;
            uint flags;
            if( item !is null )
            {
                mode = item.Mode;
                @proto = item.Proto;
                flags = item.Flags;
            }
            else if( chosen !is null )
            {
                @proto = chosen.GetSlotProto( SLOT_HAND1, mode );
                flags = proto.Flags;
            }
            
            if( item !is null || chosen !is null )
            {
                int use = _WeaponModeUse( mode );
                if( proto.Type == ITEM_TYPE_WEAPON )
                {
                    if( use == USE_RELOAD )
                        usePic = GetStrHash( "art\\intrface\\reload.frm" );
                    else if( use == USE_USE )
                        usePic = GetStrHash( "art\\intrface\\useon.frm" );
                    else if( use < MAX_USES )
                        usePic = _WeaponPicUse( proto, use );
                }
                if( usePic == 0 && FLAG( item.Flags, ITEM_CAN_USE_ON_SMTH ) )
                    usePic = GetStrHash( "art\\intrface\\useon.frm" );
                if( usePic == 0 && FLAG( item.Flags, ITEM_CAN_USE ) )
                    usePic = GetStrHash( "art\\intrface\\uset.frm" );
            }
            
            BackgroundImage.Load( usePic );
            SetPosition( 180 - BackgroundImage.Width, PosY );
        }
    }

    import uint GetItemUseApCost( CritterCl& cr, ItemCl& item, uint8 mode ) from "parameters";
    import uint GetProtoItemUseApCost( CritterCl& cr, ProtoItem& proto, uint8 mode ) from "parameters";

    class ApCost : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 10, 44 );
            SetNotHittable( true );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            uint apCost = 0;
            if( item !is null && item.Accessory == ACCESSORY_CRITTER )
            {
                apCost = GetItemUseApCost( GetCritter( item.CritId ), item, item.Mode );
            }
            else if( item is null )
            {
                CritterCl@ chosen = GetChosen();
                if( chosen !is null )
                {
                    uint8 mode = 0;
                    ProtoItem@ proto = chosen.GetSlotProto( SLOT_HAND1, mode );
                    apCost = GetProtoItemUseApCost( chosen, proto, mode );
                }
            }
            
            SetActive( apCost > 0 );
            if( apCost > 0 )
                FindText( "ApCostValue" ).SetText( "" + apCost );
        }
    }

    class ApCostImage : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 17, 12 );
            SetBackgroundImage( "art/intrface/ap_pic.png" );
        }
    }

    class ApCostValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 20, 0 );
            SetTextFont( FONT_SAND_NUM );
            SetTextColor( COLOR_IFACE );
        }
    }

    class AimPic : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 162, 41 );
            SetSize( 18, 18 );
            SetNotHittable( true );
            SetBackgroundImage( "art/intrface/aim_pic.png" );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            CritterCl@ chosen = GetChosen();
            uint8 mode = 0;
            if( item !is null )
                mode = item.Mode;
            else if( chosen !is null )
                chosen.GetSlotProto( SLOT_HAND1, mode );
            
            BackgroundImage.Hidden = ( _WeaponModeAim( mode ) == HIT_LOCATION_NONE );
        }
    }

    class Indicators : GUIPanel
    {
        #define INDICATOR_LINES          ( 0 )
        #define INDICATOR_NUMBERS        ( 1 )
        #define INDICATOR_BOTH           ( 2 )
        #define INDICATOR_CHANGE_TICK    ( 35 )
        
        void DrawIndicator( int[] rect, int[]& points, uint color, int cur, int max, uint& tick, bool isVertical, bool fromTopOrLeft )
        {
            int percent = 0;
            if( max != 0 )
            {
                percent = cur * 100 / max;
                percent = CLAMP( percent, 0, 100 );
            }
        
            if( GetTick() >= tick )
            {
                uint pointsCount = ( isVertical ? rect[ 3 ] : rect[ 2 ] ) / 2 * percent / 100;
                if( pointsCount == 0 && percent > 0 )
                    pointsCount = 1;
        
                if( points.length() / 3 != pointsCount )
                {
                    if( pointsCount > points.length() / 3 )
                        pointsCount = points.length() / 3 + 1;
                    else
                        pointsCount = points.length() / 3 - 1;
        
                    points.resize( pointsCount * 3 );
                    for( uint i = 0; i < pointsCount; i++ )
                    {
                        int x, y;
                        if( isVertical )
                        {
                            x = rect[ 0 ];
                            if( fromTopOrLeft )
                                y = rect[ 1 ] + i * 2;
                            else
                                y = rect[ 1 ] + rect[ 3 ] - i * 2;
                        }
                        else
                        {
                            y = rect[ 1 ];
                            if( fromTopOrLeft )
                                x = rect[ 0 ] + i * 2;
                            else
                                x = rect[ 0 ] + rect[ 2 ] - i * 2;
                        }
                        points[ i * 3 + 0 ] = x;
                        points[ i * 3 + 1 ] = y;
                        points[ i * 3 + 2 ] = color;
                    }
                }
                tick = GetTick() + INDICATOR_CHANGE_TICK;
            }
        
            if( points.length() > 0 )
                DrawPrimitive( DRAW_PRIMITIVE_POINTLIST, points );
        }

        void OnConstruct() override
        {
            SetPosition( 197, 0 );
        }
    }

    class AmmoLine : GUIPanel
    {
        int[] Points;
        uint CurTick;

        void OnConstruct() override
        {
            SetSize( 1, 70 );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            if( __IndicatorType != INDICATOR_LINES && __IndicatorType != INDICATOR_BOTH )
                return;
            
            int indicatorMax = 0;
            int indicatorCur = 0;
            
            if( item !is null )
            {
                if( item.GetType() == ITEM_TYPE_WEAPON && item.Proto.Weapon_MaxAmmoCount > 0 )
                {
                    indicatorMax = item.Proto.Weapon_MaxAmmoCount;
                    indicatorCur = item.AmmoCount;
                }
                else
                {
                    indicatorMax = item.Proto.IndicatorMax;
                    indicatorCur = item.Indicator;
                }
            }
            
            int[] rect = { AbsolutePosX, AbsolutePosY, Width, Height };
            cast< Indicators >( Parent ).DrawIndicator( rect, Points, COLOR_GREEN, indicatorCur, indicatorMax, CurTick, true, false );
        }
    }

    class DeteriorationLine : GUIPanel
    {
        int[] Points;
        uint CurTick;

        void OnConstruct() override
        {
            SetPosition( 3, 0 );
            SetSize( 1, 70 );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            if( __IndicatorType != INDICATOR_LINES && __IndicatorType != INDICATOR_BOTH )
                return;
            
            int indicatorMax = 0;
            int indicatorCur = 0;
            
            if( item !is null && item.IsDeteriorable() )
            {
                indicatorMax = MAX_DETERIORATION;
                indicatorCur = item.Deterioration;
            }
            
            int[] rect = { AbsolutePosX, AbsolutePosY, Width, Height };
            cast< Indicators >( Parent ).DrawIndicator( rect, Points, COLOR_RED, indicatorCur, indicatorMax, CurTick, true, false );
        }
    }

    void Init( int screenIndex )
    {
        Screen _Screen();
        _Screen.Init( null );
        Main _Main();
        _Main.Init( _Screen );
        Console _Console();
        _Console.Init( _Main );
        ConsoleImage _ConsoleImage();
        _ConsoleImage.Init( _Console );
        ConsoleText _ConsoleText();
        _ConsoleText.Init( _Console );
        MessageBoxExtended _MessageBoxExtended();
        _MessageBoxExtended.Init( _Main );
        MessageBoxText _MessageBoxText();
        _MessageBoxText.Init( _Main );
        ExtendMessageBox _ExtendMessageBox();
        _ExtendMessageBox.Init( _Main );
        Filter1 _Filter1();
        _Filter1.Init( _Main );
        Filter2 _Filter2();
        _Filter2.Init( _Main );
        GameMenu _GameMenu();
        _GameMenu.Init( _Main );
        Inventory _Inventory();
        _Inventory.Init( _Main );
        SwitchItems _SwitchItems();
        _SwitchItems.Init( _Main );
        Skills _Skills();
        _Skills.Init( _Main );
        Map _Map();
        _Map.Init( _Main );
        Character _Character();
        _Character.Init( _Main );
        PipBoy _PipBoy();
        _PipBoy.Init( _Main );
        FixBoy _FixBoy();
        _FixBoy.Init( _Main );
        Combat _Combat();
        _Combat.Init( _Main );
        EndTurn _EndTurn();
        _EndTurn.Init( _Combat );
        EndCombat _EndCombat();
        _EndCombat.Init( _Combat );
        ActionPoints _ActionPoints();
        _ActionPoints.Init( _Main );
        Led _Led();
        _Led.Init( _ActionPoints );
        LedGreen _LedGreen();
        _LedGreen.Init( _Led );
        LedRed _LedRed();
        _LedRed.Init( _Led );
        LedYellow _LedYellow();
        _LedYellow.Init( _Led );
        BreakTime _BreakTime();
        _BreakTime.Init( _Main );
        BreakTimeLed _BreakTimeLed();
        _BreakTimeLed.Init( _BreakTime );
        HitPoints _HitPoints();
        _HitPoints.Init( _Main );
        ArmorClass _ArmorClass();
        _ArmorClass.Init( _Main );
        MainItemPlate _MainItemPlate();
        _MainItemPlate.Init( _Main );
        MainItemSlot _MainItemSlot();
        _MainItemSlot.Init( _MainItemPlate );
        MainItemSlotCell _MainItemSlotCell();
        _MainItemSlotCell.Init( _MainItemSlot );
        AmmoCount _AmmoCount();
        _AmmoCount.Init( _MainItemSlotCell );
        DeteriorationValue _DeteriorationValue();
        _DeteriorationValue.Init( _MainItemSlotCell );
        UsePic _UsePic();
        _UsePic.Init( _MainItemSlotCell );
        ApCost _ApCost();
        _ApCost.Init( _MainItemSlotCell );
        ApCostImage _ApCostImage();
        _ApCostImage.Init( _ApCost );
        ApCostValue _ApCostValue();
        _ApCostValue.Init( _ApCost );
        AimPic _AimPic();
        _AimPic.Init( _MainItemSlotCell );
        Indicators _Indicators();
        _Indicators.Init( _MainItemSlotCell );
        AmmoLine _AmmoLine();
        _AmmoLine.Init( _Indicators );
        DeteriorationLine _DeteriorationLine();
        _DeteriorationLine.Init( _Indicators );
        GUI_RegisterScreen( screenIndex, _Screen );
    }
}

namespace Inventory
{
    class Inventory : GUIScreen
    {
        void OnConstruct() override
        {
            SetModal( true );
            SetAvailableCursors( array< int > = { CURSOR_HAND, CURSOR_DEFAULT } );
            SetCanMove( true, false );
            SetSize( 499, 377 );
            SetBackgroundImage( "art/intrface/inventory.png" );
        }
    }

    class InvItems : GUIItemView
    {
        void OnConstruct() override
        {
            SetPosition( 43, 40 );
            SetCellPrototype( "InvItem" );
            SetGridSize( 10 );
            SetColumns( 1 );
            SetUserData( SLOT_INV );
            SetUseSorting( true );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT_INV ? int( item.SortValue ) : -1;
        }
    }

    class InvItem : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 70, 30 );
            SetDraggable( true );
            SetBackgroundImage( "art/intrface/dummy.png", IMAGE_LAYOUT_ZOOM );
        }

        void OnMouseDown( int button ) override
        {
            if( button == MOUSE_BUTTON_WHEEL_UP || button == MOUSE_BUTTON_WHEEL_DOWN )
            {
                GUIItemView@ invItems = cast< GUIItemView >( Parent );
                invItems.SetScroll( invItems.Scroll + ( button == MOUSE_BUTTON_WHEEL_UP ? -1 : 1 ), true );
            }
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            SetDraggable( item !is null );
            BackgroundImage.Load( item !is null ? ( item.PicInv != 0 ? item.PicInv : item.Proto.PicInv ) : 0 );
            SetSize( IsDragged ? BackgroundImage.Width : 70, IsDragged ? BackgroundImage.Height : 30 );
        }
    }

    class ItemCount : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 65, 27 );
            SetTextFlags( FT_CENTERR | FT_BOTTOM );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            uint count = 1;
            if( item !is null )
                count = item.GetCount();
            SetText( count > 1 && !IsDragged ? "x" + count : "" );
        }
    }

    class SlotHand1 : GUIItemView
    {
        void OnConstruct() override
        {
            SetPosition( 155, 287 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT_HAND1 );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT_HAND1 ? 0 : -1;
        }
    }

    class SlotHand2 : GUIItemView
    {
        void OnConstruct() override
        {
            SetPosition( 246, 287 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT_HAND2 );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT_HAND2 ? 0 : -1;
        }
    }

    class SlotArmor : GUIItemView
    {
        void OnConstruct() override
        {
            SetPosition( 155, 184 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT_ARMOR );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT_ARMOR ? 0 : -1;
        }
    }

    class SlotItem : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 155, 287 );
            SetSize( 90, 60 );
            SetDraggable( true );
            SetBackgroundImage( "art/intrface/dummy.png", IMAGE_LAYOUT_ZOOM );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            SetPosition( 0, 0 );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            SetDraggable( item !is null );
            BackgroundImage.Load( item !is null ? ( item.PicInv != 0 ? item.PicInv : item.Proto.PicInv ) : 0 );
        }
    }

    class Chosen : GUIPanel
    {
        int CurDir;
        uint LastDirChangeTick;

        void OnConstruct() override
        {
            SetPosition( 176, 35 );
            SetSize( 61, 98 );
        }

        void OnInit() override
        {
            CurDir            = 0;
            LastDirChangeTick = GetTick();
        }

        void OnDraw() override
        {
            uint curTick = GetTick();
            if( curTick - LastDirChangeTick >= 500 )
            {
                LastDirChangeTick = curTick;
                CurDir++;
                if( CurDir >= ( __MapHexagonal ? 6 : 8 ) )
                    CurDir = 0;
            }
            
            CritterCl@ chosen = GetChosen();
            if( chosen !is null )
            {
                if( chosen.IsAnim3d() )
                {
                    float[] chaPosition( 14 );
                    // Position
                    chaPosition[ 0 ] = AbsolutePosX + Width / 2;
                    chaPosition[ 1 ] = AbsolutePosY + Height - 10;
                    // Rotation
                    chaPosition[ 2 ] = __MapCameraAngle;
                    chaPosition[ 3 ] = ( __MapHexagonal ? 150 - CurDir * 60 : 135 - CurDir * 45 );
                    chaPosition[ 4 ] = 0.0;
                    // Scale
                    chaPosition[ 5 ] = 1.0;
                    chaPosition[ 6 ] = 1.0;
                    chaPosition[ 7 ] = 1.0;
                    // Speed
                    chaPosition[ 8 ] = 1.0;
                    // Reserved
                    chaPosition[ 9 ] = 0.0;
                    // Stencil rectangle
                    chaPosition[ 10 ] = AbsolutePosX;
                    chaPosition[ 11 ] = AbsolutePosY;
                    chaPosition[ 12 ] = AbsolutePosX + Width;
                    chaPosition[ 13 ] = AbsolutePosY + Height;
                    DrawCritter3d( 2, chosen.CrType, chosen.GetAnim1(), ANIM2_IDLE, chosen.Anim3dLayer, chaPosition, 0 );
                }
                else
                {
                    DrawCritter2d( chosen.CrType, chosen.GetAnim1(), ANIM2_IDLE, CurDir,
                        AbsolutePosX, AbsolutePosY, AbsolutePosX + Width, AbsolutePosY + Height, false, true, 0 );
                }
            }
        }
    }

    import string generic_description( int descType, int& offsX, int& offsY ) from "client_main";

    class Description : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 299, 48 );
            SetSize( 145, 182 );
        }

        void OnDraw() override
        {
            string@ text = CustomCall( "InvItemInfo" + ( GetCurrentCursor() != CURSOR_DEFAULT ? " X" : "" ) );
            if( text == "" )
            {
                int ox = 0, oy = 0;
                
                @text = generic_description( DESC_INVENTORY_MAIN, ox, oy );
                DrawText( text, AbsolutePosX + ox, AbsolutePosY + oy, Width, Height, COLOR_TEXT, FONT_DEFAULT, FT_NOBREAK_LINE );
            
                @text = generic_description( DESC_INVENTORY_SPECIAL, ox, oy );
                DrawText( text, AbsolutePosX + ox, AbsolutePosY + oy, Width, Height, COLOR_TEXT, FONT_DEFAULT, FT_NOBREAK_LINE );
            
                @text = generic_description( DESC_INVENTORY_STATS, ox, oy );
                DrawText( text, AbsolutePosX + ox, AbsolutePosY + oy, Width, Height, COLOR_TEXT, FONT_DEFAULT, FT_NOBREAK_LINE );
            
                @text = generic_description( DESC_INVENTORY_RESIST, ox, oy );
                DrawText( text, AbsolutePosX + ox, AbsolutePosY + oy, Width, Height, COLOR_TEXT, FONT_DEFAULT, FT_NOBREAK_LINE );
            }
            else
            {
                DrawText( text, AbsolutePosX, AbsolutePosY, Width, Height, COLOR_TEXT, FONT_DEFAULT, 0 );
            }
        }
    }

    class ScrollUp : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 134, 42 );
            SetSize( 22, 23 );
            SetBackgroundImage( "art/intrface/inv_scr_up_normal.png" );
            SetPressedImage( "art/intrface/inv_scr_up_pressed.png" );
            SetDisabledImage( "art/intrface/inv_scr_up_disabled.png" );
        }

        void OnDraw() override
        {
            GUIItemView@ invItems = cast< GUIItemView >( Parent.Find( "InvItems", false ) );
            SetCondition( invItems.CheckScrollAvailability( invItems.Scroll - 1 ) );
        }

        void OnLMousePressed() override
        {
            GUIItemView@ invItems = cast< GUIItemView >( Parent.Find( "InvItems", false ) );
            invItems.SetScroll( invItems.Scroll - 1, true );
        }
    }

    class ScrollDown : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 134, 66 );
            SetSize( 22, 23 );
            SetBackgroundImage( "art/intrface/inv_scr_dn_normal.png" );
            SetPressedImage( "art/intrface/inv_scr_dn_pressed.png" );
            SetDisabledImage( "art/intrface/inv_scr_dn_disabled.png" );
        }

        void OnDraw() override
        {
            GUIItemView@ invItems = cast< GUIItemView >( Parent.Find( "InvItems", false ) );
            SetCondition( invItems.CheckScrollAvailability( invItems.Scroll + 1 ) );
        }

        void OnLMousePressed() override
        {
            GUIItemView@ invItems = cast< GUIItemView >( Parent.Find( "InvItems", false ) );
            invItems.SetScroll( invItems.Scroll + 1, true );
        }
    }

    class Close : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 433, 324 );
            SetSize( 26, 26 );
            SetPressedImage( "art/intrface/inv_close_dn.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
        }
    }

    void Init( int screenIndex )
    {
        Inventory _Inventory();
        _Inventory.Init( null );
        InvItems _InvItems();
        _InvItems.Init( _Inventory );
        InvItem _InvItem();
        _InvItem.Init( _InvItems );
        ItemCount _ItemCount();
        _ItemCount.Init( _InvItem );
        SlotHand1 _SlotHand1();
        _SlotHand1.Init( _Inventory );
        SlotHand2 _SlotHand2();
        _SlotHand2.Init( _Inventory );
        SlotArmor _SlotArmor();
        _SlotArmor.Init( _Inventory );
        SlotItem _SlotItem();
        _SlotItem.Init( _Inventory );
        Chosen _Chosen();
        _Chosen.Init( _Inventory );
        Description _Description();
        _Description.Init( _Inventory );
        ScrollUp _ScrollUp();
        _ScrollUp.Init( _Inventory );
        ScrollDown _ScrollDown();
        _ScrollDown.Init( _Inventory );
        Close _Close();
        _Close.Init( _Inventory );
        GUI_RegisterScreen( screenIndex, _Inventory );
    }
}

namespace Cursor
{
    class Screen : GUIScreen
    {
        void OnConstruct() override
        {
            SetCanMove( true, false );
        }
    }

    import uint GetActiveItemAttackDistantion( CritterCl& cr ) from "parameters";
    import int to_hit( CritterCl& chosen, CritterCl& target, ProtoItem& weapon, uint8 weaponMode ) from "client_main";

    class Cursor : GUIPanel
    {
        Sprite CursorDefault;
        Sprite CursorHand;
        Sprite CursorWait;
        Sprite CursorAttack;
        Sprite CursorUseItem;
        Sprite CursorUseSkill;
        Sprite[] CursorMoveScreen;

        void OnConstruct() override
        {
        }

        void OnInit() override
        {
            CursorDefault.Load( "art/intrface/cursor_default.png" );
            CursorHand.Load( "art/intrface/cursor_hand.png" );
            CursorWait.Load( "art/intrface/cursor_wait.png" );
            CursorAttack.Load( "art/intrface/cursor_attack.png" );
            CursorUseItem.Load( "art/intrface/cursor_use_item.png" );
            CursorUseSkill.Load( "art/intrface/cursor_use_skill.png" );
            CursorMoveScreen.resize( 8 );
            CursorMoveScreen[ 0 ].Load( "art/intrface/cursor_move_screen_u.png" );
            CursorMoveScreen[ 1 ].Load( "art/intrface/cursor_move_screen_ur.png" );
            CursorMoveScreen[ 2 ].Load( "art/intrface/cursor_move_screen_r.png" );
            CursorMoveScreen[ 3 ].Load( "art/intrface/cursor_move_screen_dr.png" );
            CursorMoveScreen[ 4 ].Load( "art/intrface/cursor_move_screen_d.png" );
            CursorMoveScreen[ 5 ].Load( "art/intrface/cursor_move_screen_dl.png" );
            CursorMoveScreen[ 6 ].Load( "art/intrface/cursor_move_screen_l.png" );
            CursorMoveScreen[ 7 ].Load( "art/intrface/cursor_move_screen_ul.png" );
        }

        void OnDraw() override
        {
            if( __HideCursor )
                return;
            
            // Wait
            int cursor = GetCurrentCursor();
            if( cursor == CURSOR_WAIT )
            {
                CursorWait.Draw( __MouseX, __MouseY, 0, 0, 0, 0 );
                return;
            }
            
            // Game scroll
            bool hasMouseScroll = true;
            if( __ScrollMouseLeft && __ScrollMouseUp )
                CursorMoveScreen[ 7 ].Draw( __MouseX, __MouseY, 0, 0, -1, -1 );
            else if( __ScrollMouseRight && __ScrollMouseUp )
                CursorMoveScreen[ 1 ].Draw( __MouseX, __MouseY, 0, 0, 1, -1 );
            else if( __ScrollMouseLeft && __ScrollMouseDown )
                CursorMoveScreen[ 5 ].Draw( __MouseX, __MouseY, 0, 0, -1, 1 );
            else if( __ScrollMouseRight && __ScrollMouseDown )
                CursorMoveScreen[ 3 ].Draw( __MouseX, __MouseY, 0, 0, 1, 1 );
            else if( __ScrollMouseLeft )
                CursorMoveScreen[ 6 ].Draw( __MouseX, __MouseY, 0, 0, -1, 0 );
            else if( __ScrollMouseRight )
                CursorMoveScreen[ 2 ].Draw( __MouseX, __MouseY, 0, 0, 1, 0 );
            else if( __ScrollMouseUp )
                CursorMoveScreen[ 0 ].Draw( __MouseX, __MouseY, 0, 0, 0, -1 );
            else if( __ScrollMouseDown )
                CursorMoveScreen[ 4 ].Draw( __MouseX, __MouseY, 0, 0, 0, 1 );
            else
                hasMouseScroll = false;
            if( hasMouseScroll )
                return;
            
            // Other cursors
            if( cursor == CURSOR_USE_WEAPON )
            {
                CursorAttack.Draw( __MouseX, __MouseY, 0, 0, 0, 0 );
            
                CritterCl@ chosen = GetChosen();
                if( chosen is null )
                    return;
            
                CritterCl@ cr = GetMonitorCritter( __MouseX, __MouseY, false );
                if( cr is null || cr is chosen )
                    return;
            
                uint attackDist = GetActiveItemAttackDistantion( chosen );
                if( attackDist == 0 )
                    return;
            
                bool trace = false;
                CritterCl@[] critters;
                GetCrittersPath( chosen.HexX, chosen.HexY, cr.HexX, cr.HexY, 0.0f, attackDist, FIND_ALL, critters );
                for( uint i = 0; i < critters.length(); i++ )
                {
                    if( critters[ i ].Id == cr.Id )
                    {
                        trace = true;
                        break;
                    }
                }
                if( !trace )
                    return;
            
                uint8 mode = 0;
                int hit = to_hit( chosen, cr, chosen.GetSlotProto( SLOT_HAND1, mode ), mode );
                if( hit == 0 )
                    return;
                
                DrawText( hit + "%", __MouseX + 6, __MouseY + 6, 100, 100, COLOR_RED, FONT_DEFAULT, 0 );
            }
            else if( cursor == CURSOR_USE_ITEM )
            {
                CursorUseItem.Draw( __MouseX, __MouseY, 0, 0, 0, 0 );
            }
            else if( cursor == CURSOR_USE_SKILL )
            {
                CursorUseSkill.Draw( __MouseX, __MouseY, 0, 0, 0, 0 );
				ItemCl@ item = GetMonitorItem(__MouseX, __MouseY);
				if (valid(item))
				{
					CritterCl@ chosen = GetChosen();
					uint16 pid = item.GetProtoId();
					uint16 skillDiff = 0;
					// Kriz TODO
					if (pid >= 710 && pid < 750)
					{
						switch(pid)
						{
							case PID_GEN_PLANT_CABBAGE: skillDiff = GEN_PLANT_DIFF_CABBAGE; break;
							case PID_GEN_PLANT_CORN: 	skillDiff = GEN_PLANT_DIFF_CORN; break;
							case PID_GEN_BROC_FLOWER: 	skillDiff = GEN_PLANT_DIFF_BROC; break;
							case PID_GEN_XANDER_ROOT: 	skillDiff = GEN_PLANT_DIFF_XANDER; break;
								default: break;
						}
						DrawText(CLAMP(chosen.Skill[SK_BOTANY] - skillDiff, 5, 95) + "%", __MouseX + 6, __MouseY + 6, 100, 100, COLOR_SAND, FONT_DEFAULT, 0 );
					}
					else if (pid >= 750 && pid < 775)
					{
						switch (pid)
						{
							case PID_GEN_ORE_IRON: skillDiff = GEN_ORE_DIFF_IRON; break;
						}
						DrawText(CLAMP(chosen.Skill[SK_MINING] - skillDiff, 5, 95) + "%", __MouseX + 6, __MouseY + 6, 100, 100, COLOR_SAND, FONT_DEFAULT, 0 );
					}
				}
				else return;
            }
            else if( cursor == CURSOR_MOVE )
            {
                uint16 hx, hy;
                if( !GetMonitorHex( __MouseX, __MouseY, hx, hy, false ) )
                    CursorDefault.Draw( __MouseX, __MouseY, 0, 0, -1, -1 );
            }
            else if( cursor == CURSOR_DEFAULT )
            {
                CursorDefault.Draw( __MouseX, __MouseY, 0, 0, -1, -1 );
            }
            else if( cursor == CURSOR_HAND )
            {
                CustomCall( "CurDrawHand" );
            }
            else
            {
                CursorDefault.Draw( __MouseX, __MouseY, 0, 0, -1, -1 );
            }
        }
    }

    class LMenu : GUIPanel
    {
        void OnConstruct() override
        {
        }
    }

    class MenuSlots : GUIGrid
    {
        void OnConstruct() override
        {
        }
    }

    class MenuSlot : GUIPanel
    {
        void OnConstruct() override
        {
        }
    }

    void Init( int screenIndex )
    {
        Screen _Screen();
        _Screen.Init( null );
        Cursor _Cursor();
        _Cursor.Init( _Screen );
        LMenu _LMenu();
        _LMenu.Init( _Screen );
        MenuSlots _MenuSlots();
        _MenuSlots.Init( _LMenu );
        MenuSlot _MenuSlot();
        _MenuSlot.Init( _MenuSlots );
        GUI_RegisterScreen( screenIndex, _Screen );
    }
}
/*
namespace SkillBox
{
    //CritterProperty[] UsedSkills = { SkillSneak, SkillLockpick, SkillSteal, SkillTraps, SkillFirstAid, SkillDoctor, SkillScience, SkillRepair };
	
    int[] UsedSkills = { SK_SNEAK, SK_LOCKPICK, SK_STEAL, SK_TRAPS, SK_FIRST_AID, SK_DOCTOR, SK_SCIENCE, SK_REPAIR };
	
	/*int[] ShowSkills = { SK_SMALL_GUNS, SK_BIG_GUNS, SK_ENERGY_WEAPONS, SK_UNARMED, SK_MELEE_WEAPONS, SK_THROWING, SK_FIRST_AID, SK_DOCTOR, SK_SNEAK, SK_LOCKPICK, SK_STEAL, SK_TRAPS, SK_SCIENCE, SK_REPAIR, SK_SPEECH, SK_BARTER, SK_GAMBLING, SK_OUTDOORSMAN };
*/

namespace SkillBox
{
    int[] UsedSkills = { SK_SNEAK, SK_MINING, SK_SKINNING, SK_TRAPS, SK_FIRST_AID, SK_BOTANY, SK_ELECTRONICS, SK_REPAIR };

    uint TargetCritterId;
    uint TargetItemId;
    bool IsInventory;
    
    string@ FormatXXX( int value )
    {
        value       = CLAMP( value, 0, 100 );
        string text = "";
        if( value < 100 )
            text += "0";
        if( value < 10 )
            text += "0";
        return text + value;
    }

    class SkillBox : GUIScreen
    {
        void OnConstruct() override
        {
            SetCanMove( true, false );
            SetSize( 185, 368 );
            SetAnchor( ANCHOR_RIGHT );
            SetBackgroundImage( "art/intrface/SKLDXBOX.png" );
        }

        void OnShow( dictionary@ params ) override
		{
			TargetCritterId = 0;
			TargetItemId    = 0;
			IsInventory     = false;
			
			CritterCl@ cr = GetMonitorCritter( __MouseX, __MouseY );
			if (valid (cr))
			{
				TargetCritterId = cr.Id;
			}
			else
			{
				ItemCl@ item = GetMonitorItem( __MouseX, __MouseY );
				if (valid (item))
				{
					TargetItemId = item.Id;
				}
				else
				{
					
				}
			}
			
		}
    }

    class MainName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 47, 8 );
            SetSize( 92, 30 );
            SetText( MSG_GAME( STR_CHA_SKILLS ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class SkillsGrid : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 15, 46 );
            SetCellPrototype( "SkillsPanel" );
            SetGridSize( UsedSkills.length() );
            SetPadding( 0, 10 );
        }
    }

    class SkillsPanel : GUIPanel
    {
        int Prop;

        void OnConstruct() override
        {
            SetSize( 150, 26 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Prop = UsedSkills[ cellIndex ];
        }
    }

    class SkillButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPressedImage( "art/intrface/SKLDXON.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
			
			int Prop = cast< SkillsPanel >( Parent ).Prop;
			
            if( TargetCritterId == 0 && TargetItemId == 0 )
            {    
                if( Prop == SK_SNEAK )
                    SetChosenActions( array< uint > = { CHOSEN_USE_SKL_ON_CRITTER, SK_SNEAK, 0, 0, 0, 0, 0 } );
                    //SetChosenActions( array< uint > = { CHOSEN_USE_SKL_ON_CRITTER, uint( int::SK_SNEAK ), 0, 0, 0, 0, 0 } );
                else
                    ChangeCursor( CURSOR_USE_SKILL, Prop );
            }
			else
            {
                if( TargetCritterId != 0 )
                {
                    CritterCl@ cr = GetCritter( TargetCritterId );
                    if( cr !is null )
					{
                        SetChosenActions( array< uint > = { CHOSEN_USE_SKL_ON_CRITTER, Prop, TargetCritterId, 0, 0, 0, 0 } );
						//Message (""+Prop);
					}
                }
                else
                {
                    ItemCl@ item = GetItem( TargetItemId );
                    if( item !is null )
                    {
                        if( item.GetType() != ITEM_TYPE_GENERIC && item.GetType() != ITEM_TYPE_GRID )
						{
							SetChosenActions( array< uint > = { CHOSEN_USE_SKL_ON_ITEM, IsInventory ? 1 : 0, Prop, TargetItemId, 0, 0, 0 } );
						}
						else
						{
							SetChosenActions( array< uint > = { CHOSEN_USE_SKL_ON_SCEN, Prop, item.GetProtoId(), item.HexX, item.HexY, 0, 0 } );
						}
                            //SetChosenActions( array< uint > = { CHOSEN_USE_SKL_ON_ITEM, IsInventory ? 1 : 0, uint( Prop ), TargetItemId, 0, 0, 0 } );
                        //else
                            //SetChosenActions( array< uint > = { CHOSEN_USE_SKL_ON_SCEN, uint( Prop ), item.ProtoId, item.HexX, item.HexY, 0, 0 } );
                    }
                }
            }
			
            /*
            CritterProperty Prop = cast< SkillsPanel >( Parent ).Prop;
            if( TargetCritterId == 0 && TargetItemId == 0 )
            {    
                if( Prop == SkillSneak )
                    SetChosenActions( array< uint > = { CHOSEN_USE_SKL_ON_CRITTER, uint( CritterProperty::SkillSneak ), 0, 0, 0, 0, 0 } );
                else
                    ChangeCursor( CURSOR_USE_SKILL, Prop );
            }
            else
            {
                if( TargetCritterId != 0 )
                {
                    CritterCl@ cr = GetCritter( TargetCritterId );
                    if( cr !is null )
                        SetChosenActions( array< uint > = { CHOSEN_USE_SKL_ON_CRITTER, uint( Prop ), TargetCritterId, 0, 0, 0, 0 } );
                }
                else
                {
                    ItemCl@ item = GetItem( TargetItemId );
                    if( item !is null )
                    {
                        if( item.Type != ITEM_TYPE_GENERIC && item.Type != ITEM_TYPE_GRID )
                            SetChosenActions( array< uint > = { CHOSEN_USE_SKL_ON_ITEM, IsInventory ? 1 : 0, uint( Prop ), TargetItemId, 0, 0, 0 } );
                        else
                            SetChosenActions( array< uint > = { CHOSEN_USE_SKL_ON_SCEN, uint( Prop ), item.ProtoId, item.HexX, item.HexY, 0, 0 } );
                    }
                }
            }*/
        }
    }

    class SkillName : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 85, 26 );
            SetNotHittable( true );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_PARAM_NAME( cast< SkillsPanel >( Parent ).Prop ) );
        }
    }

    class SkillValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 93, 0 );
            SetSize( 50, 26 );
            SetTextFont( FONT_BIG_NUM );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            CritterCl@ chosen = GetChosen();
            if( chosen !is null )
                return FormatXXX(cast< SkillsPanel >( Parent ).Prop );
            return "";
        }
    }

    class ExitButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 48, 338 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
        }
    }

    class ExitText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 16, -5 );
            SetSize( 75, 25 );
            SetText( MSG_GAME( STR_CHA_CANCEL ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    void Init( int screenIndex )
    {
        SkillBox _SkillBox();
        _SkillBox.Init( null );
        MainName _MainName();
        _MainName.Init( _SkillBox );
        SkillsGrid _SkillsGrid();
        _SkillsGrid.Init( _SkillBox );
        SkillsPanel _SkillsPanel();
        _SkillsPanel.Init( _SkillsGrid );
        SkillButton _SkillButton();
        _SkillButton.Init( _SkillsPanel );
        SkillName _SkillName();
        _SkillName.Init( _SkillsPanel );
        SkillValue _SkillValue();
        _SkillValue.Init( _SkillsPanel );
        ExitButton _ExitButton();
        _ExitButton.Init( _SkillBox );
        ExitText _ExitText();
        _ExitText.Init( _ExitButton );
        GUI_RegisterScreen( screenIndex, _SkillBox );
    }
}

namespace Character
{
    int[] ShowBaseStats = { ST_STRENGTH, ST_PERCEPTION, ST_ENDURANCE, ST_CHARISMA, ST_INTELLECT, ST_AGILITY, ST_LUCK };
    int[] ShowHealthStats = { ST_MAX_LIFE, DAMAGE_POISONED, DAMAGE_RADIATED, DAMAGE_EYE, DAMAGE_RIGHT_ARM, DAMAGE_LEFT_ARM, DAMAGE_RIGHT_LEG, DAMAGE_LEFT_LEG };
    int[] ShowExtendedStats = { ST_ARMOR_CLASS, ST_ACTION_POINTS, ST_CARRY_WEIGHT, ST_MELEE_DAMAGE, ST_NORMAL_RESIST, ST_POISON_RESISTANCE, ST_RADIATION_RESISTANCE, ST_CRIT_RESIST, ST_HEALING_RATE, ST_CRITICAL_CHANCE };
    int[] ShowSkills = { 
		SK_SMALL_GUNS, 
		SK_BIG_GUNS, 
		SK_ENERGY_WEAPONS, 
		SK_UNARMED, 
		SK_MELEE_WEAPONS, 
		SK_THROWING, 
		SK_TRAPS, 
		SK_FIRST_AID,
		SK_SNEAK, 
		SK_MINING,
		SK_BOTANY,
		SK_PHARMA,
		SK_SKINNING,
		SK_REPAIR,
		SK_ELECTRONICS,
		SK_GUNSMITH,
		SK_ARMOURER,
		SK_BARTER 
	};
    
    int CurTip             = -1;
    int UnspentSkillPoints = 0;
    int[] SkillUp;
    
    int GetParam( int param )
    {
        CritterCl@ chosen = GetChosen();
        return chosen !is null ? chosen.Param[ param ] : 0;
    }
    
    bool IsTagSkill( int param )
    {
        return GetParam( TAG_SKILL1 ) == param ||
            GetParam( TAG_SKILL2 ) == param ||
            GetParam( TAG_SKILL3 ) == param ||
            GetParam( TAG_SKILL4 ) == param;
    }
    
    string@ FormatXX( int value )
    {
        value = CLAMP( value, 0, 99 );
        return value < 10 ? "0" + value : "" + value;
    }

    class Character : GUIScreen
    {
        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetSize( 640, 480 );
            SetBackgroundImage( "art/intrface/character.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            UnspentSkillPoints = GetParam( ST_UNSPENT_SKILL_POINTS );
            SkillUp.resize( 0 );
            SkillUp.resize( PARAMS_COUNT );
            if( GetParam( ST_UNSPENT_PERKS ) > 0 )
                ShowScreen( CLIENT_SCREEN_PERK );
        }
    }

    class BaseStats : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 15, 35 );
            SetCellPrototype( "BaseStat" );
            SetGridSize( ShowBaseStats.length() );
        }
    }

    class BaseStat : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetSize( 155, 33 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowBaseStats[ cellIndex ];
        }
    }

    class StatName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 4, 4 );
            SetSize( 40, 20 );
            SetText( "TXT" );
            SetTextFont( FONT_BIG );
            SetTextColor( COLOR_SAND );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_INV_SHORT_SPECIAL( cast< BaseStat >( Parent ).Param ) );
        }
    }

    class StatValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 44, 2 );
            SetSize( 30, 24 );
            SetTextFont( FONT_BIG_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return FormatXX( GetParam( cast< BaseStat >( Parent ).Param ) );
        }
    }

    class StatValueDesc : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 87, 4 );
            SetSize( 55, 20 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        string@ get_Text() override
        {
            return MSG_GAME( STR_STAT_LEVEL( GetParam( cast< BaseStat >( Parent ).Param ) ) );
        }
    }

    class HealthStats : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 192, 42 );
            SetCellPrototype( "HealthStat" );
            SetGridSize( ShowHealthStats.length() );
        }
    }

    class HealthStat : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetSize( 122, 14 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowHealthStats[ cellIndex ];
        }
    }

    class StatDesc : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 122, 13 );
            SetTextFlags( FT_CENTERY );
        }

        void OnDraw() override
        {
            int param = cast< HealthStat >( Parent ).Param;
            uint color;
            if( param == DAMAGE_RADIATED )
                color = ( GetParam( ST_RADIATION_LEVEL ) != 0 ? 0 : COLOR_DARK );
            else if( param == DAMAGE_POISONED )
                color = ( GetParam( ST_POISONING_LEVEL ) != 0 ? 0 : COLOR_DARK );
            else
                color = ( GetParam( param ) != 0 ? 0: COLOR_DARK );
            SetTextColor( color );
        }

        string@ get_Text() override
        {
            int param = cast< HealthStat >( Parent ).Param;
            if( param == ST_MAX_LIFE )
                return MSG_GAME( STR_INV_HP ) + "  " + GetParam( ST_CURRENT_HP ) + " / " + GetParam( ST_MAX_LIFE );
			
			// Kriz:
			if (param == DAMAGE_POISONED)
			{
				string strPoison = MSG_GAME( STR_PARAM_NAME( param ));
				if (GetParam( ST_POISONING_LEVEL ) > 0)
				{
					return strPoison+" (" + GetParam( ST_POISONING_LEVEL ) + ")";
				}
				else return strPoison;
			}
			
            return MSG_GAME( STR_PARAM_NAME( param ) );
        }
    }

    class ExtendedStats : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 192, 179 );
            SetCellPrototype( "ExtendedStat" );
            SetGridSize( ShowExtendedStats.length() );
        }
    }

    class ExtendedStat : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetSize( 122, 13 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowExtendedStats[ cellIndex ];
        }
    }

    class StatName2 : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 100, 13 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            int param = cast< ExtendedStat >( Parent ).Param;
            Text = MSG_GAME( STR_PARAM_NAME_SHORT( param ) );
        }
    }

    class StatValue2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 98, 0 );
            SetSize( 25, 13 );
            SetTextFlags( FT_CENTERY );
        }

        string@ get_Text() override
        {
            int param = cast< ExtendedStat >( Parent ).Param;
            string text;
            if( param == ST_CARRY_WEIGHT )
                text = "" + ( GetParam( param ) / 1000 );
            else if( param == ST_NORMAL_RESIST || param == ST_NORMAL_RESIST )
                text = "" + GetParam( param ) + "%";
            else
                text = "" + GetParam( param );
            return text;
        }
    }

    class Skills : GUIGrid
    {
        //int CurSkill = SKILL_BEGIN;
		// Kriz:
        int CurSkill = 200;
		uint8 clickedSkill = 0;
		//Message(SKILL_BEGIN);

        void OnConstruct() override
        {
            SetPosition( 348, 26 );
            SetCellPrototype( "Skill" );
            SetGridSize( ShowSkills.length() );
        }
    }

    class Skill : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetSize( 280, 11 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowSkills[ cellIndex ];
        }
    }

    class SkillName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 22, -1 );
            SetSize( 200, 13 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_PARAM_NAME( cast< Skill >( Parent ).Param ) );
        }

        void OnDraw() override
        {
			if (cast< Skills >( Parent.Parent ).clickedSkill == uint(cast< Skill >( Parent ).Param))
			{
				SetTextColor (COLOR_LEMON);
			}
			else 
			{
				SetTextColor( IsTagSkill( cast< Skill >( Parent ).Param ) ? 0xFFAAAAAA : COLOR_TEXT );
			}
        }

        void OnMouseDown( int button ) override
        {
            if( button == MOUSE_BUTTON_LEFT )
			{
				cast< Skills >( Parent.Parent ).clickedSkill = cast< Skill >( Parent ).Param;
			}
        }
    }

    class SkillValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 225, -1 );
            SetSize( 40, 13 );
            SetTextFlags( FT_CENTERY );
        }

        void OnDraw() override
        {
            SetTextColor( IsTagSkill( cast< Skill >( Parent ).Param ) ? 0xFFAAAAAA : COLOR_TEXT );
        }

        void OnMouseDown( int button ) override
        {
            if( button == MOUSE_BUTTON_LEFT )
                cast< Skills >( Parent.Parent ).CurSkill = cast< Skill >( Parent ).Param;
        }

        string@ get_Text() override
        {
            int param = cast< Skill >( Parent ).Param;
            return ( GetParam( param ) + SkillUp[ param ] ) + "%";
        }
    }

    class Title3 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 19, -25 );
            SetSize( 150, 24 );
            SetText( MSG_GAME( STR_CHA_SKILLS ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class Slider : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 245, -10 );
            SetSize( 43, 29 );
            SetBackgroundImage( "art/intrface/slider.png" );
        }

        void OnDraw() override
        {
            SetPosition( 245, -10 + ( cast< Skills >( Parent ).CurSkill - SKILL_BEGIN ) * 11 );
        }
    }

    class IncPoint : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 22, 3 );
            SetSize( 16, 12 );
            SetPressedImage( "art/intrface/slider_inc.png" );
        }

        void OnLMousePressed() override
        {
            if( UnspentSkillPoints <= 0 )
                return;
            
            int curSkill = cast< Skills >( Parent.Parent ).CurSkill;
            int skillVal = GetParam( curSkill ) + SkillUp[ curSkill ];
            if( skillVal >= MAX_SKILL_VAL )
                return;
            
            int needSP = 1;
            if( skillVal > __SkillModAdd6 )
                needSP = 6;
            else if( skillVal > __SkillModAdd5 )
                needSP = 5;
            else if( skillVal > __SkillModAdd4 )
                needSP = 4;
            else if( skillVal > __SkillModAdd3 )
                needSP = 3;
            else if( skillVal > __SkillModAdd2 )
                needSP = 2;
            
            if( UnspentSkillPoints < needSP )
                return;
            
            UnspentSkillPoints -= needSP;
            SkillUp[ curSkill ]++;
            if( IsTagSkill( curSkill ) )
                SkillUp[ curSkill ]++;
        }
    }

    class DecPoint : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 22, 16 );
            SetSize( 17, 12 );
            SetPressedImage( "art/intrface/slider_dec.png" );
        }

        void OnLMousePressed() override
        {
            int curSkill = cast< Skills >( Parent.Parent ).CurSkill;
            if( SkillUp[ curSkill ] <= 0 )
                return;
            
            SkillUp[ curSkill ]--;
            if( IsTagSkill( curSkill ) )
                SkillUp[ curSkill ]--;
            
            int skillVal = GetParam( curSkill ) + SkillUp[ curSkill ];
            if( skillVal > __SkillModAdd6 )
                UnspentSkillPoints += 6;
            else if( skillVal > __SkillModAdd5 )
                UnspentSkillPoints += 5;
            else if( skillVal > __SkillModAdd4 )
                UnspentSkillPoints += 4;
            else if( skillVal > __SkillModAdd3 )
                UnspentSkillPoints += 3;
            else if( skillVal > __SkillModAdd2 )
                UnspentSkillPoints += 2;
            else
                UnspentSkillPoints += 1;
        }
    }

    class SkillPoints : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 352, 227 );
        }
    }

    class Title2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 1, 1 );
            SetSize( 150, 26 );
            SetText( MSG_GAME( STR_CHA_UNSPENT_SP ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class UnspentValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 171, 1 );
            SetSize( 30, 25 );
            SetTextFont( FONT_BIG_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return FormatXX( UnspentSkillPoints );
        }
    }

    class Tip : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 342, 264 );
        }

        void OnDraw() override
        {
            GUIObject@ obj = GUI_GetFocusedObject();
            if( obj is null )
                return;
            
            int param = -1;
            
            #define CHECK_PARAM_PARENT #( className ) if( param == -1 && cast< className >( obj.Parent ) !is null ) param = cast< className >( obj.Parent ).Param
            CHECK_PARAM_PARENT( BaseStat );
            CHECK_PARAM_PARENT( HealthStat );
            CHECK_PARAM_PARENT( ExtendedStat );
            CHECK_PARAM_PARENT( Skill );
            
            if( cast< TextLevel >( obj ) !is null )
                param = ST_LEVEL;
            if( cast< TextExp >( obj ) !is null )
                param = ST_EXPERIENCE;
            
            if( param != -1 && CurTip != param )
            {
                CurTip = param;
                FindText( "Name" ).Text = MSG_GAME( STR_PARAM_NAME( param ) );
                FindText( "Desc" ).Text = MSG_GAME( STR_PARAM_DESC( param ) );
                FindPanel( "Image" ).SetBackgroundImage( GetConstantName( CONSTANTS_PICTURE, param ) );
            }
        }
    }

    class Image : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 141, 44 );
        }
    }

    class Name : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 8, 7 );
            SetSize( 270, 31 );
            SetTextFont( FONT_THIN );
            SetTextColor( COLOR_BLACK );
        }
    }

    class Desc : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 8, 44 );
            SetSize( 150, 124 );
            SetTextColor( COLOR_BLACK );
        }
    }

    class Buttons : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 334, 448 );
        }
    }

    class Print : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 31, 0 );
        }
    }

    class Button1 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -21, 6 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }
    }

    class Text7 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -2, 5 );
            SetText( MSG_GAME( STR_CHA_PRINT ) );
            SetTextFont( FONT_FAT );
            SetTextColor( COLOR_SAND );
        }
    }

    class Done : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 141, 0 );
        }
    }

    class Button2 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -19, 6 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            if( UnspentSkillPoints < GetParam( ST_UNSPENT_SKILL_POINTS ) )
            {
                string skills;
                for( uint i = 0; i < SkillUp.length(); i++ )
                    if( SkillUp[ i ] != GetParam( i ) )
                        skills += " " + i + " " + SkillUp[ i ];
                if( skills != "" )
                    CustomCall( "AssignSkillPoints" + skills );
            }
            HideScreen();
        }
    }

    class Text8 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -2, 5 );
            SetText( MSG_GAME( STR_CHA_OK ) );
            SetTextFont( FONT_FAT );
            SetTextColor( COLOR_SAND );
        }
    }

    class Back : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 237, 0 );
        }
    }

    class Button3 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -18, 6 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
        }
    }

    class Text9 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -1, 5 );
            SetText( MSG_GAME( STR_CHA_CANCEL ) );
            SetTextFont( FONT_FAT );
            SetTextColor( COLOR_SAND );
        }
    }

    class CharacterName : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 21, 1 );
        }
    }

    class CharacterText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 67, 13 );
            SetNotHittable( true );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        string@ get_Text() override
        {
            return __Name;
        }
    }

    class CharacterAge : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 160, 1 );
        }
    }

    class AgeText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 39, 13 );
            SetNotHittable( true );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        string@ get_Text() override
        {
            return "" + GetParam( ST_AGE );
        }
    }

    class CharacterGender : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 240, 1 );
        }
    }

    class GenderText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 32, 13 );
            SetNotHittable( true );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        string@ get_Text() override
        {
            return GetParam( ST_GENDER ) == GENDER_MALE ? MSG_GAME( STR_MALE_NAME ) : MSG_GAME( STR_FEMALE_NAME );
        }
    }

    class LevelStats : GUIPanel
    {
        void OnConstruct() override
        {
        }
    }

    class TextLevel : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 30, 282 );
        }

        string@ get_Text() override
        {
            return ReplaceText( MSG_GAME( STR_CHA_LEVEL ), "%d", GetParam( ST_LEVEL ) );
        }
    }

    class TextExp : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 30, 293 );
        }

        string@ get_Text() override
        {
            return ReplaceText( MSG_GAME( STR_CHA_EXPERIENCE ), "%d", GetParam( ST_EXPERIENCE ) );
        }
    }

    class TextNextLevel : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 30, 304 );
        }

        string@ get_Text() override
        {
			uint8 nextLevel = GetParam( ST_LEVEL )+1;
			//(n х (n — 1)/2) х 1.000
            return ReplaceText( MSG_GAME( STR_CHA_NEXT_LEVEL ), "%d", (nextLevel * (nextLevel - 1)/2) * 1000);
        }
    }

    class Switcher : GUIPanel
    {
        int CurSwitch = 0; // 0 - perks, 1 - karma, 2 - kills
        int[] SwitchScroll = { 0, 0, 0 };

        void OnConstruct() override
        {
            SetPosition( 12, 328 );
        }

        void OnShow( dictionary@ params ) override
        {
            SwitchScroll[ 0 ] = SwitchScroll[ 1 ] = SwitchScroll[ 2 ] = 0;
        }

        void OnDraw() override
        {
            FindPanel( reflection::typeof< PerksTitle >().nameWithoutNamespace ).SetActive( CurSwitch == 0 );
            FindPanel( reflection::typeof< KarmaTitle >().nameWithoutNamespace ).SetActive( CurSwitch == 1 );
            FindPanel( reflection::typeof< KillsTitle >().nameWithoutNamespace ).SetActive( CurSwitch == 2 );
        }
    }

    class PerksTitle : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 318, 33 );
            SetBackgroundImage( "art/intrface/cha_switcher_perks.png" );
        }
    }

    class KarmaTitle : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 318, 33 );
            SetBackgroundImage( "art/intrface/cha_switcher_karma.png" );
        }
    }

    class KillsTitle : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 318, 33 );
            SetBackgroundImage( "art/intrface/cha_switcher_kills.png" );
        }
    }

    class PerksTitleText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 55, 15 );
            SetText( MSG_GAME( STR_SWITCH_PERKS_NAME ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class KarmaTitleText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 158, 15 );
            SetText( MSG_GAME( STR_SWITCH_KARMA_NAME ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class KillsTitleText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 256, 15 );
            SetText( MSG_GAME( STR_SWITCH_KILLS_NAME ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class PerksRegion : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 111, 33 );
            SetNotCatchable( true );
        }

        void OnLMouseClick() override
        {
            cast< Switcher >( Parent ).CurSwitch = 0;
        }
    }

    class KarmaRegion : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 111, 0 );
            SetSize( 98, 33 );
            SetNotCatchable( true );
        }

        void OnLMouseClick() override
        {
            cast< Switcher >( Parent ).CurSwitch = 1;
        }
    }

    class KillsRegion : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 209, 0 );
            SetSize( 109, 33 );
            SetNotCatchable( true );
        }

        void OnLMouseClick() override
        {
            cast< Switcher >( Parent ).CurSwitch = 2;
        }
    }

    class ScrollUp : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 304, 42 );
            SetSize( 11, 14 );
            SetBackgroundImage( "art/intrface/arrow_up_off.png" );
            SetPressedImage( "art/intrface/arrow_up_on.png" );
        }

        void OnLMousePressed() override
        {
            int curSwitch = cast< Switcher >( Parent ).CurSwitch;
            if( cast< Switcher >( Parent ).SwitchScroll[ curSwitch ] > 0 )
                cast< Switcher >( Parent ).SwitchScroll[ curSwitch ]--;
        }
    }

    class ScrollDown : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 304, 56 );
            SetSize( 11, 14 );
            SetBackgroundImage( "art/intrface/arrow_down_off.png" );
            SetPressedImage( "art/intrface/arrow_down_on.png" );
        }

        void OnLMousePressed() override
        {
            int curSwitch = cast< Switcher >( Parent ).CurSwitch;
            cast< Switcher >( Parent ).SwitchScroll[ curSwitch ]++;
        }
    }

    class CurText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 17, 38 );
            SetSize( 282, 100 );
        }

        void OnDraw() override
        {
            string text;
            int    curSwitch = cast< Switcher >( Parent ).CurSwitch;
            int    scroll    = cast< Switcher >( Parent ).SwitchScroll[ curSwitch ];
			
			
            if( curSwitch == 0 )
            {
                // Traits
                bool traitsTitleAdded = false;
                for( uint i = TRAIT_BEGIN; i <= TRAIT_END; i++ )
                {
                    if( GetParam( i ) != 0 )
                    {
                        if( !traitsTitleAdded )
                        {
                            traitsTitleAdded = true;
                            text += "    " + MSG_GAME( STR_TRAITS_NAME ) + "\n";
                        }
                        text += MSG_GAME( STR_PARAM_NAME( i ) ) + "\n";
                    }
                }
                
                // Perks
                bool perksTitleAdded = false;
                for( uint i = PERK_BEGIN; i <= PERK_END; i++ )
                {
                    int value = GetParam( i );
                    if( value != 0 )
                    {
                        if( !perksTitleAdded )
                        {
                            perksTitleAdded = true;
                            text += "    " + MSG_GAME( STR_PERKS_NAME ) + "\n";
                        }
                        text += MSG_GAME( STR_PARAM_NAME( i ) );
                        if( value > 1 )
                            text += " (" + value + ")";
                        text += "\n";
                    }
                }
            }
            else if( curSwitch == 1 )
            {
				
                // General karma
                text += MSG_GAME( STR_KARMA_GEN_GEN_NAME ) + "\n";
                
                
                // Karma perks
                for( uint i = KARMA_BEGIN; i <= KARMA_END; i++ )
                {
                    if( GetParam( i ) != 0 )
                        text += MSG_GAME( STR_PARAM_NAME( i ) ) + "\n";
                }
                
                // Town reputation
                bool townReputationTitleAdded = false;
				
                for( uint i = REPUTATION_BEGIN; i <= REPUTATION_END; i++ )
                {
                    int value = GetParam( i );
                    if( uint( value ) != 0x80000000 )
                    {
                        if( !townReputationTitleAdded )
                        {
                            townReputationTitleAdded = true;
                            text += "    " + MSG_GAME( STR_TOWNREP_TITLE_NAME ) + "\n";
                        }
            
                        text += MSG_GAME( STR_PARAM_NAME( i ) ) + ": " + MSG_GAME( STR_TOWNREP_RATIO_NAME( value ) ) + " " + value + "\n"; 
                    }
                }
                
                // Addiction
                bool addictionTitleAdded = false;
                for( uint i = ADDICTION_BEGIN; i <= ADDICTION_END; i++ )
                {
                    if( GetParam( i ) != 0 )
                    {
                        if( !addictionTitleAdded )
                        {
                            addictionTitleAdded = true;
                            text += "    " + MSG_GAME( STR_ADDICT_TITLE_NAME ) + "\n";
                        }
            
                        text += MSG_GAME( STR_PARAM_NAME( i ) ) + "\n";
                    }
                }
            }
            else if( curSwitch == 2 )
            {
                for( uint i = KILL_BEGIN; i <= KILL_END; i++ )
                {
                    int value = GetParam( i );
                    if( value != 0 )
                    {
                        text += MSG_GAME( STR_PARAM_NAME( i ) );
                        if( value > 1 )
                            text += " (" + value + ")";
                        text += "\n";
                    }
                }
            }
            SetTextFlags( FT_SKIPLINES( scroll ) );
            SetText( text );
        }

        void OnMousePressed( int button ) override
        {
            int curSwitch = cast< Switcher >( Parent ).CurSwitch;
            if( button == MOUSE_BUTTON_WHEEL_UP && cast< Switcher >( Parent ).SwitchScroll[ curSwitch ] > 0 )
                cast< Switcher >( Parent ).SwitchScroll[ curSwitch ]--;
            else if( button == MOUSE_BUTTON_WHEEL_DOWN )
                cast< Switcher >( Parent ).SwitchScroll[ curSwitch ]++;
        }
    }

    void Init( int screenIndex )
    {
        Character _Character();
        _Character.Init( null );
        BaseStats _BaseStats();
        _BaseStats.Init( _Character );
        BaseStat _BaseStat();
        _BaseStat.Init( _BaseStats );
        StatName _StatName();
        _StatName.Init( _BaseStat );
        StatValue _StatValue();
        _StatValue.Init( _BaseStat );
        StatValueDesc _StatValueDesc();
        _StatValueDesc.Init( _BaseStat );
        HealthStats _HealthStats();
        _HealthStats.Init( _Character );
        HealthStat _HealthStat();
        _HealthStat.Init( _HealthStats );
        StatDesc _StatDesc();
        _StatDesc.Init( _HealthStat );
        ExtendedStats _ExtendedStats();
        _ExtendedStats.Init( _Character );
        ExtendedStat _ExtendedStat();
        _ExtendedStat.Init( _ExtendedStats );
        StatName2 _StatName2();
        _StatName2.Init( _ExtendedStat );
        StatValue2 _StatValue2();
        _StatValue2.Init( _ExtendedStat );
        Skills _Skills();
        _Skills.Init( _Character );
        Skill _Skill();
        _Skill.Init( _Skills );
        SkillName _SkillName();
        _SkillName.Init( _Skill );
        SkillValue _SkillValue();
        _SkillValue.Init( _Skill );
		
        Title3 _Title3();
        _Title3.Init( _Skills );/*
        Slider _Slider();
        _Slider.Init( _Skills );
        IncPoint _IncPoint();
        _IncPoint.Init( _Slider );
        DecPoint _DecPoint();
        _DecPoint.Init( _Slider );
        SkillPoints _SkillPoints();
        _SkillPoints.Init( _Character );
        Title2 _Title2();
        _Title2.Init( _SkillPoints );
        UnspentValue _UnspentValue();
        _UnspentValue.Init( _SkillPoints );*/
        Tip _Tip();
        _Tip.Init( _Character );
        Image _Image();
        _Image.Init( _Tip );
        Name _Name();
        _Name.Init( _Tip );
        Desc _Desc();
        _Desc.Init( _Tip );
        Buttons _Buttons();
        _Buttons.Init( _Character );
        Print _Print();
        _Print.Init( _Buttons );
        Button1 _Button1();
        _Button1.Init( _Print );
        Text7 _Text7();
        _Text7.Init( _Print );
        Done _Done();
        _Done.Init( _Buttons );
        Button2 _Button2();
        _Button2.Init( _Done );
        Text8 _Text8();
        _Text8.Init( _Done );
        Back _Back();
        _Back.Init( _Buttons );
        Button3 _Button3();
        _Button3.Init( _Back );
        Text9 _Text9();
        _Text9.Init( _Back );
        CharacterName _CharacterName();
        _CharacterName.Init( _Character );
        CharacterText _CharacterText();
        _CharacterText.Init( _CharacterName );
        CharacterAge _CharacterAge();
        _CharacterAge.Init( _Character );
        AgeText _AgeText();
        _AgeText.Init( _CharacterAge );
        CharacterGender _CharacterGender();
        _CharacterGender.Init( _Character );
        GenderText _GenderText();
        _GenderText.Init( _CharacterGender );
        LevelStats _LevelStats();
        _LevelStats.Init( _Character );
        TextLevel _TextLevel();
        _TextLevel.Init( _LevelStats );
        TextExp _TextExp();
        _TextExp.Init( _LevelStats );
        TextNextLevel _TextNextLevel();
        _TextNextLevel.Init( _LevelStats );
        Switcher _Switcher();
        _Switcher.Init( _Character );
        PerksTitle _PerksTitle();
        _PerksTitle.Init( _Switcher );
        KarmaTitle _KarmaTitle();
        _KarmaTitle.Init( _Switcher );
        KillsTitle _KillsTitle();
        _KillsTitle.Init( _Switcher );
        PerksTitleText _PerksTitleText();
        _PerksTitleText.Init( _Switcher );
        KarmaTitleText _KarmaTitleText();
        _KarmaTitleText.Init( _Switcher );
        KillsTitleText _KillsTitleText();
        _KillsTitleText.Init( _Switcher );
        PerksRegion _PerksRegion();
        _PerksRegion.Init( _Switcher );
        KarmaRegion _KarmaRegion();
        _KarmaRegion.Init( _Switcher );
        KillsRegion _KillsRegion();
        _KillsRegion.Init( _Switcher );
        ScrollUp _ScrollUp();
        _ScrollUp.Init( _Switcher );
        ScrollDown _ScrollDown();
        _ScrollDown.Init( _Switcher );
        CurText _CurText();
        _CurText.Init( _Switcher );
        GUI_RegisterScreen( screenIndex, _Character );
    }
}


namespace UpSkill
{
	uint16 currentSkill;
	uint16 maxTeacherSkill;
	uint16 learnerSkill;
	uint16 newSkillVal;
	uint price;
	uint npcId;
	
	uint GetPriceForSkillUp(/*uint8 skillUpPoints*/)
	{
		CritterCl @ cr = GetChosen();
		if (valid(cr))
		{
			// ((11-charisma)*skill)*(101-barter)/25
			uint8 skillUpPoints = newSkillVal - learnerSkill;
			uint resultPrice = 0;
			
			for (uint8 i = 1; i < skillUpPoints+1; i++)
			{
				resultPrice+= ((11-cr.Stat[ST_CHARISMA])*(learnerSkill+i))*(101-cr.Skill[SK_BARTER])/25;
				//Message ("((11-"+cr.Stat[ST_CHARISMA]+")*("+uint(learnerSkill+i)+"))*(101-"+cr.Skill[SK_BARTER]+")/25");
			}
			return resultPrice;
		}
		return 0;
	}
	
    class UpSkill : GUIScreen
    {
        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetSize( 280, 179 );
            SetBackgroundImage( "art/intrface/upskillbg.png" );
        }
        void OnShow( dictionary@ params ) override
        {
            if(params !is null)
            {
                currentSkill 		= uint( params[ "currSkill" ] );
                maxTeacherSkill  	= uint( params[ "maxTeacherSkill" ] );
                learnerSkill  		= uint( params[ "learnerSkill" ] );
				npcId				= uint( params[ "npcId" ]);
            }
			else return;
        }
    }
	
    class TextCurrSkill : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 15, 15 );
        }
		
		void OnShow() override
		{
			Text = "Текущий навык: ("+MSG_GAME( STR_PARAM_NAME( currentSkill ) )+")";
		}
    }
    class TextTeacherSkill : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 15, 28 );
        }
		
		void OnShow() override
		{
			Text = "Навык учителя: "+maxTeacherSkill;
		}
    }
	
    class TextSkillUp : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 15, 50 );
            SetTextFont( FONT_BIG );
            SetTextColor( COLOR_SAND );
            SetText( "Повысить до: " );
        }
    }
	
	class TextSkillUpValue : GUIText
	{
        void OnConstruct() override
        {
			SetPosition( 200, 50 );
			SetTextFont( FONT_BIG_NUM );
			SetTextColor( COLOR_IFACE );
			//SetText( "Повысить до: " );
		}
		void OnShow() override
		{
			newSkillVal = learnerSkill+1;
			Text = newSkillVal;
		}
        string@ get_Text() override
        {
            return ""+newSkillVal;
        }
	}
	
    class SkillInc : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 228, 50 );
            SetSize( 16, 12 );
            SetBackgroundImage( "art/intrface/SPLSOFF.FRM" );
            SetPressedImage( "art/intrface/SPLSON.FRM" );
        }

        void OnLMouseClick() override
        {
			if (newSkillVal < maxTeacherSkill)
			{
				newSkillVal+=1;
			}
        }
    }
    class SkillDec : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 228, 62 );
            SetSize( 16, 12 );
            SetBackgroundImage( "art/intrface/SNEGOFF.FRM" );
            SetPressedImage( "art/intrface/SNEGON.FRM" );
        }

        void OnLMouseClick() override
        {
			if (newSkillVal > learnerSkill+1)
			{
				newSkillVal-=1;
			}
			//Message ("newSkillVal = "+newSkillVal);
        }
    }
	
    class TextCost : GUIText
    {
        void OnConstruct() override
        {
            SetTextFont( FONT_BIG );
            SetTextColor( COLOR_SAND );
            SetPosition( 15, 90 );
			SetText("Стоимость: ");
        }
    }
	
    class CoinsIcon : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 158, 95 );
            SetBackgroundImage( "art/intrface/smallcaps.png" );
        }
    }
	
	class CostText : GUIText
    {
        void OnConstruct() override
        {
            SetTextFont( FONT_BIG );
            SetTextColor( COLOR_SAND );
            SetPosition( 200, 90 );
        }
        string@ get_Text() override
        {
			price = GetPriceForSkillUp();
			return ""+GetPriceForSkillUp();
            //return ""+;
        }
    } 
	
	class ButtonCancel : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 25, 150 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }
        void OnLMouseClick() override
        {
            HideScreen();
        }
    }
	
	class ButtonOk : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 238, 151 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }
        void OnLMouseClick() override
        {
			CritterCl @ cr = GetChosen();
			if (valid(cr))
			{
				uint16 coins = cr.CountItem(PID_BOTTLE_CAPS);
				//Message ("coins = "+coins+", price = "+price);
				if (coins >= price)
				{
					// resultPrice+= ((11-cr.Stat[ST_CHARISMA])*(learnerSkill+i))*(101-cr.Skill[SK_BARTER])/25;
					RunServerScriptUnsafe("interlayer@unsafe_TransferMoney", npcId, currentSkill, newSkillVal-learnerSkill, null, null);
					
					//TransferMoney(cr.Id, 0, coins);
					HideScreen();
				}
				else
				{
					Message ("Недостаточно денег."); 
				}
			}
			
            //
        }
    }
	
    void Init( int screenIndex )
    {
        UpSkill _UpSkill();
        _UpSkill.Init( null );
		
		TextCurrSkill _TextCurrSkill();
		_TextCurrSkill.Init(_UpSkill);
		
		TextTeacherSkill _TextTeacherSkill();
		_TextTeacherSkill.Init(_UpSkill);
		
		TextSkillUp _TextSkillUp();
		_TextSkillUp.Init(_UpSkill);
		
		TextSkillUpValue _TextSkillUpValue();
		_TextSkillUpValue.Init(_UpSkill);
		
		SkillInc _SkillInc();
		_SkillInc.Init(_UpSkill);
		SkillDec _SkillDec();
		_SkillDec.Init(_UpSkill);
		
		TextCost _TextCost();
		_TextCost.Init(_UpSkill);
		
		CoinsIcon _CoinsIcon();
		_CoinsIcon.Init(_UpSkill);
		
		CostText _CostText();
		_CostText.Init(_UpSkill);
		
		ButtonCancel _ButtonCancel();
		_ButtonCancel.Init(_UpSkill);
		
		ButtonOk _ButtonOk();
		_ButtonOk.Init(_UpSkill);
		
		GUI_RegisterScreen( screenIndex, _UpSkill );
	}
}